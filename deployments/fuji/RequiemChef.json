{
  "address": "0x09620463108474aCd2c6d6Aea42F132706B396A4",
  "abi": [
    {
      "inputs": [
        {
          "internalType": "contract IERC20",
          "name": "_reward",
          "type": "address"
        },
        {
          "internalType": "contract IFundDistributor",
          "name": "_fund",
          "type": "address"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "constructor"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Deposit",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "EmergencyWithdraw",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        }
      ],
      "name": "Harvest",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IERC20",
          "name": "lpToken",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        }
      ],
      "name": "LogPoolAddition",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "LogRewardPerSecond",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "contract IRewarder",
          "name": "rewarder",
          "type": "address"
        },
        {
          "indexed": false,
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "LogSetPool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "lpSupply",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        }
      ],
      "name": "LogUpdatePool",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "previousOwner",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "OwnershipTransferred",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "fund",
          "type": "address"
        }
      ],
      "name": "PoolFundChanged",
      "type": "event"
    },
    {
      "anonymous": false,
      "inputs": [
        {
          "indexed": true,
          "internalType": "address",
          "name": "user",
          "type": "address"
        },
        {
          "indexed": true,
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "indexed": false,
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "indexed": true,
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "Withdraw",
      "type": "event"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IERC20",
          "name": "_lpToken",
          "type": "address"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        }
      ],
      "name": "add",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "deposit",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "emergencyWithdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "fund",
      "outputs": [
        {
          "internalType": "contract IFundDistributor",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "harvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "harvestAllRewards",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "lpToken",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256[]",
          "name": "pids",
          "type": "uint256[]"
        }
      ],
      "name": "massUpdatePools",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "owner",
      "outputs": [
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "_user",
          "type": "address"
        }
      ],
      "name": "pendingReward",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pending",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "poolInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "accRewardPerShare",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "lastRewardTime",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "allocPoint",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "poolLength",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "pools",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "renounceOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "reward",
      "outputs": [
        {
          "internalType": "contract IERC20",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "rewardPerSecond",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "name": "rewarder",
      "outputs": [
        {
          "internalType": "contract IRewarder",
          "name": "",
          "type": "address"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "_allocPoint",
          "type": "uint256"
        },
        {
          "internalType": "contract IRewarder",
          "name": "_rewarder",
          "type": "address"
        },
        {
          "internalType": "bool",
          "name": "overwrite",
          "type": "bool"
        }
      ],
      "name": "set",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "contract IFundDistributor",
          "name": "_fund",
          "type": "address"
        }
      ],
      "name": "setFund",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "_rewardPerSecond",
          "type": "uint256"
        }
      ],
      "name": "setRewardPerSecond",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [],
      "name": "totalAllocPoint",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "address",
          "name": "newOwner",
          "type": "address"
        }
      ],
      "name": "transferOwnership",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        }
      ],
      "name": "updatePool",
      "outputs": [
        {
          "components": [
            {
              "internalType": "uint256",
              "name": "accRewardPerShare",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "lastRewardTime",
              "type": "uint256"
            },
            {
              "internalType": "uint256",
              "name": "allocPoint",
              "type": "uint256"
            }
          ],
          "internalType": "struct RequiemChef.PoolInfo",
          "name": "pool",
          "type": "tuple"
        }
      ],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "",
          "type": "address"
        }
      ],
      "name": "userInfo",
      "outputs": [
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "int256",
          "name": "rewardDebt",
          "type": "int256"
        }
      ],
      "stateMutability": "view",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdraw",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    },
    {
      "inputs": [
        {
          "internalType": "uint256",
          "name": "pid",
          "type": "uint256"
        },
        {
          "internalType": "uint256",
          "name": "amount",
          "type": "uint256"
        },
        {
          "internalType": "address",
          "name": "to",
          "type": "address"
        }
      ],
      "name": "withdrawAndHarvest",
      "outputs": [],
      "stateMutability": "nonpayable",
      "type": "function"
    }
  ],
  "transactionHash": "0xa2ff7276606a2b200505056409ee2906be35ce3c30df065e577223b56d17c6df",
  "receipt": {
    "to": null,
    "from": "0x10E38dFfFCfdBaaf590D5A9958B01C9cfcF6A63B",
    "contractAddress": "0x09620463108474aCd2c6d6Aea42F132706B396A4",
    "transactionIndex": 0,
    "gasUsed": "1822036",
    "logsBloom": "0x
    "blockHash": "0x0c832b78bc329a2906d834c909763eeb3bf6b70f74c1f50462b0a9bb6e8b45db",
    "transactionHash": "0xa2ff7276606a2b200505056409ee2906be35ce3c30df065e577223b56d17c6df",
    "logs": [
      {
        "transactionIndex": 0,
        "blockNumber": 1954931,
        "transactionHash": "0xa2ff7276606a2b200505056409ee2906be35ce3c30df065e577223b56d17c6df",
        "address": "0x09620463108474aCd2c6d6Aea42F132706B396A4",
        "topics": [
          "0x8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e0",
          "0x0000000000000000000000000000000000000000000000000000000000000000",
          "0x00000000000000000000000010e38dfffcfdbaaf590d5a9958b01c9cfcf6a63b"
        ],
        "data": "0x",
        "logIndex": 0,
        "blockHash": "0x0c832b78bc329a2906d834c909763eeb3bf6b70f74c1f50462b0a9bb6e8b45db"
      }
    ],
    "blockNumber": 1954931,
    "cumulativeGasUsed": "1822036",
    "status": 1,
    "byzantium": true
  },
  "args": [
    "0x78e418385153177cB1c49e58eAB5997192998bf7",
    "0xcb441f0a1D0740Ac9184E6024cDD68Fe66AA33bb"
  ],
  "solcInputHash": "e037db64dc6848c0a0453655f26a2521",
  "metadata": "{\"compiler\":{\"version\":\"0.8.4+commit.c7e474f2\"},\"language\":\"Solidity\",\"output\":{\"abi\":[{\"inputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"_reward\",\"type\":\"address\"},{\"internalType\":\"contract IFundDistributor\",\"name\":\"_fund\",\"type\":\"address\"}],\"stateMutability\":\"nonpayable\",\"type\":\"constructor\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Deposit\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"EmergencyWithdraw\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"}],\"name\":\"Harvest\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IERC20\",\"name\":\"lpToken\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"}],\"name\":\"LogPoolAddition\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"LogRewardPerSecond\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"contract IRewarder\",\"name\":\"rewarder\",\"type\":\"address\"},{\"indexed\":false,\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"LogSetPool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"lpSupply\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"}],\"name\":\"LogUpdatePool\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"previousOwner\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"OwnershipTransferred\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"fund\",\"type\":\"address\"}],\"name\":\"PoolFundChanged\",\"type\":\"event\"},{\"anonymous\":false,\"inputs\":[{\"indexed\":true,\"internalType\":\"address\",\"name\":\"user\",\"type\":\"address\"},{\"indexed\":true,\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"indexed\":false,\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"indexed\":true,\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"Withdraw\",\"type\":\"event\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IERC20\",\"name\":\"_lpToken\",\"type\":\"address\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"}],\"name\":\"add\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"deposit\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"emergencyWithdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"fund\",\"outputs\":[{\"internalType\":\"contract IFundDistributor\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"harvestAllRewards\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"lpToken\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256[]\",\"name\":\"pids\",\"type\":\"uint256[]\"}],\"name\":\"massUpdatePools\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"owner\",\"outputs\":[{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"_user\",\"type\":\"address\"}],\"name\":\"pendingReward\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pending\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"poolInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"poolLength\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"pools\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"renounceOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"reward\",\"outputs\":[{\"internalType\":\"contract IERC20\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"rewardPerSecond\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"name\":\"rewarder\",\"outputs\":[{\"internalType\":\"contract IRewarder\",\"name\":\"\",\"type\":\"address\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"_allocPoint\",\"type\":\"uint256\"},{\"internalType\":\"contract IRewarder\",\"name\":\"_rewarder\",\"type\":\"address\"},{\"internalType\":\"bool\",\"name\":\"overwrite\",\"type\":\"bool\"}],\"name\":\"set\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"contract IFundDistributor\",\"name\":\"_fund\",\"type\":\"address\"}],\"name\":\"setFund\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"_rewardPerSecond\",\"type\":\"uint256\"}],\"name\":\"setRewardPerSecond\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[],\"name\":\"totalAllocPoint\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"address\",\"name\":\"newOwner\",\"type\":\"address\"}],\"name\":\"transferOwnership\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"}],\"name\":\"updatePool\",\"outputs\":[{\"components\":[{\"internalType\":\"uint256\",\"name\":\"accRewardPerShare\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"lastRewardTime\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"allocPoint\",\"type\":\"uint256\"}],\"internalType\":\"struct RequiemChef.PoolInfo\",\"name\":\"pool\",\"type\":\"tuple\"}],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"\",\"type\":\"address\"}],\"name\":\"userInfo\",\"outputs\":[{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"int256\",\"name\":\"rewardDebt\",\"type\":\"int256\"}],\"stateMutability\":\"view\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdraw\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"},{\"inputs\":[{\"internalType\":\"uint256\",\"name\":\"pid\",\"type\":\"uint256\"},{\"internalType\":\"uint256\",\"name\":\"amount\",\"type\":\"uint256\"},{\"internalType\":\"address\",\"name\":\"to\",\"type\":\"address\"}],\"name\":\"withdrawAndHarvest\",\"outputs\":[],\"stateMutability\":\"nonpayable\",\"type\":\"function\"}],\"devdoc\":{\"kind\":\"dev\",\"methods\":{\"add(uint256,address,address)\":{\"params\":{\"_lpToken\":\"Address of the LP ERC-20 token.\",\"_rewarder\":\"Address of the rewarder delegate.\",\"allocPoint\":\"AP of the new pool.\"}},\"deposit(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to deposit.\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"The receiver of `amount` deposit benefit.\"}},\"emergencyWithdraw(uint256,address)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens.\"}},\"harvest(uint256,address)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of rewards.\"}},\"massUpdatePools(uint256[])\":{\"params\":{\"pids\":\"Pool IDs of all to be updated. Make sure to update all active pools.\"}},\"owner()\":{\"details\":\"Returns the address of the current owner.\"},\"pendingReward(uint256,address)\":{\"params\":{\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_user\":\"Address of user.\"},\"returns\":{\"pending\":\"reward for a given user.\"}},\"renounceOwnership()\":{\"details\":\"Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner.\"},\"set(uint256,uint256,address,bool)\":{\"params\":{\"_allocPoint\":\"New AP of the pool.\",\"_pid\":\"The index of the pool. See `poolInfo`.\",\"_rewarder\":\"Address of the rewarder delegate.\",\"overwrite\":\"True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\"}},\"setFund(address)\":{\"params\":{\"_fund\":\"The address of new fund contract.\"}},\"setRewardPerSecond(uint256)\":{\"params\":{\"_rewardPerSecond\":\"The amount of reward to be distributed per second.\"}},\"transferOwnership(address)\":{\"details\":\"Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner.\"},\"updatePool(uint256)\":{\"params\":{\"pid\":\"The index of the pool. See `poolInfo`.\"},\"returns\":{\"pool\":\"Returns the pool that was updated.\"}},\"withdraw(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to withdraw.\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens.\"}},\"withdrawAndHarvest(uint256,uint256,address)\":{\"params\":{\"amount\":\"LP token amount to withdraw.\",\"pid\":\"The index of the pool. See `poolInfo`.\",\"to\":\"Receiver of the LP tokens and rewards.\"}}},\"stateVariables\":{\"totalAllocPoint\":{\"details\":\"Total allocation points. Must be the sum of all allocation points in all pools.\"}},\"version\":1},\"userdoc\":{\"kind\":\"user\",\"methods\":{\"add(uint256,address,address)\":{\"notice\":\"Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do.\"},\"deposit(uint256,uint256,address)\":{\"notice\":\"Deposit LP tokens to MCV2 for reward allocation.\"},\"emergencyWithdraw(uint256,address)\":{\"notice\":\"Withdraw without caring about rewards. EMERGENCY ONLY.\"},\"harvest(uint256,address)\":{\"notice\":\"Harvest proceeds for transaction sender to `to`.\"},\"lpToken(uint256)\":{\"notice\":\"Address of the LP token for each MCV2 pool.\"},\"massUpdatePools(uint256[])\":{\"notice\":\"Update reward variables for all pools. Be careful of gas spending!\"},\"pendingReward(uint256,address)\":{\"notice\":\"View function to see pending reward on frontend.\"},\"poolInfo(uint256)\":{\"notice\":\"Info of each MCV2 pool.\"},\"poolLength()\":{\"notice\":\"Returns the number of MCV2 pools.\"},\"rewarder(uint256)\":{\"notice\":\"Address of each `IRewarder` contract in MCV2.\"},\"set(uint256,uint256,address,bool)\":{\"notice\":\"Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\"},\"setFund(address)\":{\"notice\":\"Set the new fund contract.\"},\"setRewardPerSecond(uint256)\":{\"notice\":\"Sets the reward per second to be distributed. Can only be called by the owner.\"},\"updatePool(uint256)\":{\"notice\":\"Update reward variables of the given pool.\"},\"userInfo(uint256,address)\":{\"notice\":\"Info of each user that stakes LP tokens.\"},\"withdraw(uint256,uint256,address)\":{\"notice\":\"Withdraw LP tokens from MCV2.\"},\"withdrawAndHarvest(uint256,uint256,address)\":{\"notice\":\"Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\"}},\"version\":1}},\"settings\":{\"compilationTarget\":{\"contracts/RequiemChef.sol\":\"RequiemChef\"},\"evmVersion\":\"istanbul\",\"libraries\":{\":__CACHE_BREAKER__\":\"0x00000000d41867734bbee4c6863d9255b2b06ac1\"},\"metadata\":{\"bytecodeHash\":\"ipfs\",\"useLiteralContent\":true},\"optimizer\":{\"enabled\":true,\"runs\":200},\"remappings\":[]},\"sources\":{\"contracts/RequiemChef.sol\":{\"content\":\"// SPDX-License-Identifier: UNLICENSED\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./libraries/Ownable.sol\\\";\\nimport \\\"./interfaces/IERC20.sol\\\";\\nimport \\\"./interfaces/IRewarder.sol\\\";\\nimport \\\"./interfaces/IFundDistributor.sol\\\";\\nimport \\\"./libraries/SafeERC20.sol\\\";\\n\\n/*  RequiemChef is a fork from Sushi's MiniChef v2 with slightly modification.\\n    1.  Rewards will be transferred from a seperated contract so that it will be more flexible to switch between:\\n        [mint reward token directly] OR [transfer them instead]\\n    2.  Add a Harvest all function to quickly harvest rewards from all the deposited pools\\n*/\\ncontract RequiemChef is Ownable {\\n    using SafeERC20 for IERC20;\\n\\n    struct UserInfo {\\n        uint256 amount;\\n        int256 rewardDebt;\\n    }\\n\\n    struct PoolInfo {\\n        uint256 accRewardPerShare;\\n        uint256 lastRewardTime;\\n        uint256 allocPoint;\\n    }\\n\\n    IERC20 public reward;\\n    IFundDistributor public fund;\\n\\n    /// @notice Info of each MCV2 pool.\\n    PoolInfo[] public poolInfo;\\n    /// @notice Address of the LP token for each MCV2 pool.\\n    IERC20[] public lpToken;\\n    /// @notice Address of each `IRewarder` contract in MCV2.\\n    IRewarder[] public rewarder;\\n\\n    /// @notice Info of each user that stakes LP tokens.\\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\\n    uint256 public totalAllocPoint = 0;\\n\\n    uint256 public rewardPerSecond;\\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\\n\\n    constructor(IERC20 _reward, IFundDistributor _fund) {\\n        reward = _reward;\\n        fund = _fund;\\n    }\\n\\n    /* ========== PUBLIC FUNCTIONS ========== */\\n\\n\\n    /// @notice Returns the number of MCV2 pools.\\n    function poolLength() public view returns (uint256 pools) {\\n        pools = poolInfo.length;\\n    }\\n\\n    /// @notice View function to see pending reward on frontend.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _user Address of user.\\n    /// @return pending reward for a given user.\\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256 pending) {\\n        PoolInfo memory pool = poolInfo[_pid];\\n        UserInfo storage user = userInfo[_pid][_user];\\n        uint256 accRewardPerShare = pool.accRewardPerShare;\\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\\n            uint256 time = block.timestamp - pool.lastRewardTime;\\n            uint256 rewardAmount = time * rewardPerSecond * pool.allocPoint / totalAllocPoint;\\n            accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / lpSupply;\\n        }\\n        pending = uint256(int256(user.amount * accRewardPerShare / ACC_REWARD_PRECISION) - user.rewardDebt);\\n    }\\n\\n    /// @notice Update reward variables of the given pool.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @return pool Returns the pool that was updated.\\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\\n        pool = poolInfo[pid];\\n        if (block.timestamp > pool.lastRewardTime) {\\n            uint256 lpSupply = lpToken[pid].balanceOf(address(this));\\n            if (lpSupply > 0) {\\n                uint256 time = block.timestamp - pool.lastRewardTime;\\n                uint256 rewardAmount = time * rewardPerSecond * pool.allocPoint / totalAllocPoint;\\n                pool.accRewardPerShare += rewardAmount * ACC_REWARD_PRECISION / lpSupply;\\n            }\\n            pool.lastRewardTime = block.timestamp;\\n            poolInfo[pid] = pool;\\n            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accRewardPerShare);\\n        }\\n    }\\n\\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\\n    function massUpdatePools(uint256[] calldata pids) external {\\n        uint256 len = pids.length;\\n        for (uint256 i = 0; i < len; ++i) {\\n            updatePool(pids[i]);\\n        }\\n    }\\n\\n    /// @notice Deposit LP tokens to MCV2 for reward allocation.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to deposit.\\n    /// @param to The receiver of `amount` deposit benefit.\\n    function deposit(uint256 pid, uint256 amount, address to) public {\\n        PoolInfo memory pool = updatePool(pid);\\n        UserInfo storage user = userInfo[pid][to];\\n\\n        // Effects\\n        user.amount += amount;\\n        user.rewardDebt += int256(amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\\n\\n        // Interactions\\n        IRewarder _rewarder = rewarder[pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onReward(pid, to, to, 0, user.amount);\\n        }\\n\\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\\n\\n        emit Deposit(msg.sender, pid, amount, to);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MCV2.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to withdraw.\\n    /// @param to Receiver of the LP tokens.\\n    function withdraw(uint256 pid, uint256 amount, address to) public {\\n        PoolInfo memory pool = updatePool(pid);\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n\\n        // Effects\\n        user.rewardDebt -= int256(amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\\n        user.amount -= amount;\\n        // Interactions\\n        IRewarder _rewarder = rewarder[pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onReward(pid, msg.sender, to, 0, user.amount);\\n        }\\n\\n        lpToken[pid].safeTransfer(to, amount);\\n\\n        emit Withdraw(msg.sender, pid, amount, to);\\n    }\\n\\n    /// @notice Harvest proceeds for transaction sender to `to`.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of rewards.\\n    function harvest(uint256 pid, address to) public {\\n        PoolInfo memory pool = updatePool(pid);\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        int256 accumulatedReward = int256(user.amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\\n\\n        // Effects\\n        user.rewardDebt = accumulatedReward;\\n\\n        // Interactions\\n        fund.distributeTo(to, _pendingReward);\\n\\n        IRewarder _rewarder = rewarder[pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onReward( pid, msg.sender, to, _pendingReward, user.amount);\\n        }\\n\\n        emit Harvest(msg.sender, pid, _pendingReward);\\n    }\\n\\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param amount LP token amount to withdraw.\\n    /// @param to Receiver of the LP tokens and rewards.\\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) public {\\n        PoolInfo memory pool = updatePool(pid);\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        int256 accumulatedReward = int256(user.amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\\n\\n        // Effects\\n        user.rewardDebt = accumulatedReward - int256(amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\\n        user.amount -= amount;\\n\\n        // Interactions\\n        fund.distributeTo(to, _pendingReward);\\n\\n        IRewarder _rewarder = rewarder[pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\\n        }\\n\\n        lpToken[pid].safeTransfer(to, amount);\\n\\n        emit Withdraw(msg.sender, pid, amount, to);\\n        emit Harvest(msg.sender, pid, _pendingReward);\\n    }\\n\\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\\n    /// @param pid The index of the pool. See `poolInfo`.\\n    /// @param to Receiver of the LP tokens.\\n    function emergencyWithdraw(uint256 pid, address to) public {\\n        UserInfo storage user = userInfo[pid][msg.sender];\\n        uint256 amount = user.amount;\\n        user.amount = 0;\\n        user.rewardDebt = 0;\\n\\n        IRewarder _rewarder = rewarder[pid];\\n        if (address(_rewarder) != address(0)) {\\n            _rewarder.onReward(pid, msg.sender, to, 0, 0);\\n        }\\n\\n        // Note: transfer can fail or succeed if `amount` is zero.\\n        lpToken[pid].safeTransfer(to, amount);\\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\\n    }\\n\\n    function harvestAllRewards(address to) external {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            if (userInfo[pid][msg.sender].amount > 0) {\\n                harvest(pid, to);\\n            }\\n        }\\n    }\\n\\n    /* ========== INTERNAL FUNCTIONS ========== */\\n\\n    function checkPoolDuplicate(IERC20 _lpToken) internal view {\\n        uint256 length = poolInfo.length;\\n        for (uint256 pid = 0; pid < length; ++pid) {\\n            require(lpToken[pid] != _lpToken, \\\"add: existing pool?\\\");\\n        }\\n    }\\n\\n    /* ========== RESTRICTED FUNCTIONS ========== */\\n\\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\\n    /// @param allocPoint AP of the new pool.\\n    /// @param _lpToken Address of the LP ERC-20 token.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    function add(uint256 allocPoint, IERC20 _lpToken, IRewarder _rewarder) public onlyOwner {\\n        checkPoolDuplicate(_lpToken);\\n\\n        totalAllocPoint += allocPoint;\\n        lpToken.push(_lpToken);\\n        rewarder.push(_rewarder);\\n\\n        poolInfo.push(PoolInfo({\\n            allocPoint: allocPoint,\\n            lastRewardTime: block.timestamp,\\n            accRewardPerShare: 0\\n            }));\\n        emit LogPoolAddition(lpToken.length - 1, allocPoint, _lpToken, _rewarder);\\n    }\\n\\n    /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\\n    /// @param _pid The index of the pool. See `poolInfo`.\\n    /// @param _allocPoint New AP of the pool.\\n    /// @param _rewarder Address of the rewarder delegate.\\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\\n    function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool overwrite) public onlyOwner {\\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\\n        poolInfo[_pid].allocPoint = _allocPoint;\\n        if (overwrite) { rewarder[_pid] = _rewarder; }\\n        emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite);\\n    }\\n\\n    /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\\n    /// @param _rewardPerSecond The amount of reward to be distributed per second.\\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\\n        rewardPerSecond = _rewardPerSecond;\\n        emit LogRewardPerSecond(_rewardPerSecond);\\n    }\\n\\n    /// @notice Set the new fund contract.\\n    /// @param _fund The address of new fund contract.\\n    function setFund(IFundDistributor _fund) public onlyOwner {\\n        fund = _fund;\\n        emit PoolFundChanged(address(_fund));\\n    }\\n\\n    /* =============== EVENTS ==================== */\\n\\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\\n    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardTime, uint256 lpSupply, uint256 accRewardPerShare);\\n    event LogRewardPerSecond(uint256 rewardPerSecond);\\n    event PoolFundChanged(address indexed fund);\\n}\\n\",\"keccak256\":\"0xc4846d7b640a0d26139c396693ac4fcd89390c7673928210175e9246d86bdf13\",\"license\":\"UNLICENSED\"},\"contracts/interfaces/IERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Interface of the ERC20 standard as defined in the EIP.\\n */\\ninterface IERC20 {\\n    /**\\n     * @dev Returns the amount of tokens in existence.\\n     */\\n    function totalSupply() external view returns (uint256);\\n\\n    /**\\n     * @dev Returns the amount of tokens owned by `account`.\\n     */\\n    function balanceOf(address account) external view returns (uint256);\\n\\n    /**\\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transfer(address recipient, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Returns the remaining number of tokens that `spender` will be\\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\\n     * zero by default.\\n     *\\n     * This value changes when {approve} or {transferFrom} are called.\\n     */\\n    function allowance(address owner, address spender) external view returns (uint256);\\n\\n    /**\\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\\n     * that someone may use both the old and the new allowance by unfortunate\\n     * transaction ordering. One possible solution to mitigate this race\\n     * condition is to first reduce the spender's allowance to 0 and set the\\n     * desired value afterwards:\\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\\n     *\\n     * Emits an {Approval} event.\\n     */\\n    function approve(address spender, uint256 amount) external returns (bool);\\n\\n    /**\\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\\n     * allowance mechanism. `amount` is then deducted from the caller's\\n     * allowance.\\n     *\\n     * Returns a boolean value indicating whether the operation succeeded.\\n     *\\n     * Emits a {Transfer} event.\\n     */\\n    function transferFrom(\\n        address sender,\\n        address recipient,\\n        uint256 amount\\n    ) external returns (bool);\\n\\n    /**\\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\\n     * another (`to`).\\n     *\\n     * Note that `value` may be zero.\\n     */\\n    event Transfer(address indexed from, address indexed to, uint256 value);\\n\\n    /**\\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\\n     * a call to {approve}. `value` is the new allowance.\\n     */\\n    event Approval(address indexed owner, address indexed spender, uint256 value);\\n}\",\"keccak256\":\"0xb55c91551ef864f86edd296378fc3430f19798c0d1de468ff772a83a842df24c\",\"license\":\"MIT\"},\"contracts/interfaces/IFundDistributor.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\ninterface IFundDistributor {\\n    function distributeTo(\\n        address _receiver,\\n        uint256 _amount\\n    ) external;\\n}\\n\",\"keccak256\":\"0x1102616da68476c97bb1cc78179aeaf8c44ef6a67c63f0df3af86c2cbbfeb2bb\",\"license\":\"MIT\"},\"contracts/interfaces/IRewarder.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity 0.8.4;\\n\\nimport \\\"./IERC20.sol\\\";\\n\\ninterface IRewarder {\\n\\n    function onReward(uint256 pid, address user, address recipient, uint256 rewardAmount, uint256 newLpAmount) external;\\n    function pendingTokens(uint256 pid, address user, uint256 rewardAmount) external view returns (IERC20[] memory, uint256[] memory);\\n}\\n\",\"keccak256\":\"0xca13149f0f27c63440410b8605737f2f40aaa734d316cecf0827e66e3c032eca\",\"license\":\"MIT\"},\"contracts/libraries/Address.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Collection of functions related to the address type\\n */\\nlibrary Address {\\n    /**\\n     * @dev Returns true if `account` is a contract.\\n     *\\n     * [IMPORTANT]\\n     * ====\\n     * It is unsafe to assume that an address for which this function returns\\n     * false is an externally-owned account (EOA) and not a contract.\\n     *\\n     * Among others, `isContract` will return false for the following\\n     * types of addresses:\\n     *\\n     *  - an externally-owned account\\n     *  - a contract in construction\\n     *  - an address where a contract will be created\\n     *  - an address where a contract lived, but was destroyed\\n     * ====\\n     */\\n    function isContract(address account) internal view returns (bool) {\\n        // This method relies on extcodesize, which returns 0 for contracts in\\n        // construction, since the code is only stored at the end of the\\n        // constructor execution.\\n\\n        uint256 size;\\n        assembly {\\n            size := extcodesize(account)\\n        }\\n        return size > 0;\\n    }\\n\\n    /**\\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\\n     * `recipient`, forwarding all available gas and reverting on errors.\\n     *\\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\\n     * imposed by `transfer`, making them unable to receive funds via\\n     * `transfer`. {sendValue} removes this limitation.\\n     *\\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\\n     *\\n     * IMPORTANT: because control is transferred to `recipient`, care must be\\n     * taken to not create reentrancy vulnerabilities. Consider using\\n     * {ReentrancyGuard} or the\\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\\n     */\\n    function sendValue(address payable recipient, uint256 amount) internal {\\n        require(address(this).balance >= amount, \\\"Address: insufficient balance\\\");\\n\\n        (bool success, ) = recipient.call{value: amount}(\\\"\\\");\\n        require(success, \\\"Address: unable to send value, recipient may have reverted\\\");\\n    }\\n\\n    /**\\n     * @dev Performs a Solidity function call using a low level `call`. A\\n     * plain `call` is an unsafe replacement for a function call: use this\\n     * function instead.\\n     *\\n     * If `target` reverts with a revert reason, it is bubbled up by this\\n     * function (like regular Solidity function calls).\\n     *\\n     * Returns the raw returned data. To convert to the expected return value,\\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\\n     *\\n     * Requirements:\\n     *\\n     * - `target` must be a contract.\\n     * - calling `target` with `data` must not revert.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionCall(target, data, \\\"Address: low-level call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\\n     * `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, 0, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but also transferring `value` wei to `target`.\\n     *\\n     * Requirements:\\n     *\\n     * - the calling contract must have an ETH balance of at least `value`.\\n     * - the called Solidity function must be `payable`.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value\\n    ) internal returns (bytes memory) {\\n        return functionCallWithValue(target, data, value, \\\"Address: low-level call with value failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\\n     *\\n     * _Available since v3.1._\\n     */\\n    function functionCallWithValue(\\n        address target,\\n        bytes memory data,\\n        uint256 value,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(address(this).balance >= value, \\\"Address: insufficient balance for call\\\");\\n        require(isContract(target), \\\"Address: call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\\n        return functionStaticCall(target, data, \\\"Address: low-level static call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a static call.\\n     *\\n     * _Available since v3.3._\\n     */\\n    function functionStaticCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal view returns (bytes memory) {\\n        require(isContract(target), \\\"Address: static call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.staticcall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\\n        return functionDelegateCall(target, data, \\\"Address: low-level delegate call failed\\\");\\n    }\\n\\n    /**\\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\\n     * but performing a delegate call.\\n     *\\n     * _Available since v3.4._\\n     */\\n    function functionDelegateCall(\\n        address target,\\n        bytes memory data,\\n        string memory errorMessage\\n    ) internal returns (bytes memory) {\\n        require(isContract(target), \\\"Address: delegate call to non-contract\\\");\\n\\n        (bool success, bytes memory returndata) = target.delegatecall(data);\\n        return verifyCallResult(success, returndata, errorMessage);\\n    }\\n\\n    /**\\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\\n     * revert reason using the provided one.\\n     *\\n     * _Available since v4.3._\\n     */\\n    function verifyCallResult(\\n        bool success,\\n        bytes memory returndata,\\n        string memory errorMessage\\n    ) internal pure returns (bytes memory) {\\n        if (success) {\\n            return returndata;\\n        } else {\\n            // Look for revert reason and bubble it up if present\\n            if (returndata.length > 0) {\\n                // The easiest way to bubble the revert reason is using memory via assembly\\n\\n                assembly {\\n                    let returndata_size := mload(returndata)\\n                    revert(add(32, returndata), returndata_size)\\n                }\\n            } else {\\n                revert(errorMessage);\\n            }\\n        }\\n    }\\n}\",\"keccak256\":\"0xc1202fa69783cb3ea0d87f178cab5e1f3a77de7fc0dff3c47f668f3cd65d9273\",\"license\":\"MIT\"},\"contracts/libraries/Context.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\n/**\\n * @dev Provides information about the current execution context, including the\\n * sender of the transaction and its data. While these are generally available\\n * via msg.sender and msg.data, they should not be accessed in such a direct\\n * manner, since when dealing with meta-transactions the account sending and\\n * paying for execution may not be the actual sender (as far as an application\\n * is concerned).\\n *\\n * This contract is only required for intermediate, library-like contracts.\\n */\\nabstract contract Context {\\n    function _msgSender() internal view virtual returns (address) {\\n        return msg.sender;\\n    }\\n\\n    function _msgData() internal view virtual returns (bytes calldata) {\\n        return msg.data;\\n    }\\n}\",\"keccak256\":\"0x45cb9d70dc84e6f4ec8202a58599a881421174348e0fd4400a99a22678aa7913\",\"license\":\"MIT\"},\"contracts/libraries/Ownable.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"./Context.sol\\\";\\n\\n/**\\n * @dev Contract module which provides a basic access control mechanism, where\\n * there is an account (an owner) that can be granted exclusive access to\\n * specific functions.\\n *\\n * By default, the owner account will be the one that deploys the contract. This\\n * can later be changed with {transferOwnership}.\\n *\\n * This module is used through inheritance. It will make available the modifier\\n * `onlyOwner`, which can be applied to your functions to restrict their use to\\n * the owner.\\n */\\nabstract contract Ownable is Context {\\n    address private _owner;\\n\\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\\n\\n    /**\\n     * @dev Initializes the contract setting the deployer as the initial owner.\\n     */\\n    constructor() {\\n        _transferOwnership(_msgSender());\\n    }\\n\\n    /**\\n     * @dev Returns the address of the current owner.\\n     */\\n    function owner() public view virtual returns (address) {\\n        return _owner;\\n    }\\n\\n    /**\\n     * @dev Throws if called by any account other than the owner.\\n     */\\n    modifier onlyOwner() {\\n        require(owner() == _msgSender(), \\\"Ownable: caller is not the owner\\\");\\n        _;\\n    }\\n\\n    /**\\n     * @dev Leaves the contract without owner. It will not be possible to call\\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\\n     *\\n     * NOTE: Renouncing ownership will leave the contract without an owner,\\n     * thereby removing any functionality that is only available to the owner.\\n     */\\n    function renounceOwnership() public virtual onlyOwner {\\n        _transferOwnership(address(0));\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Can only be called by the current owner.\\n     */\\n    function transferOwnership(address newOwner) public virtual onlyOwner {\\n        require(newOwner != address(0), \\\"Ownable: new owner is the zero address\\\");\\n        _transferOwnership(newOwner);\\n    }\\n\\n    /**\\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\\n     * Internal function without access restriction.\\n     */\\n    function _transferOwnership(address newOwner) internal virtual {\\n        address oldOwner = _owner;\\n        _owner = newOwner;\\n        emit OwnershipTransferred(oldOwner, newOwner);\\n    }\\n}\",\"keccak256\":\"0xebc779eef137e493b8c2a11fa304d5ed6b62726ae1b6c3c71d5ce2fbb9da42d8\",\"license\":\"MIT\"},\"contracts/libraries/SafeERC20.sol\":{\"content\":\"// SPDX-License-Identifier: MIT\\n\\npragma solidity ^0.8.0;\\n\\nimport \\\"../interfaces/IERC20.sol\\\";\\nimport \\\"./Address.sol\\\";\\n\\n/**\\n * @title SafeERC20\\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\\n * contract returns false). Tokens that return no value (and instead revert or\\n * throw on failure) are also supported, non-reverting calls are assumed to be\\n * successful.\\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\\n */\\nlibrary SafeERC20 {\\n    using Address for address;\\n\\n    function safeTransfer(\\n        IERC20 token,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\\n    }\\n\\n    function safeTransferFrom(\\n        IERC20 token,\\n        address from,\\n        address to,\\n        uint256 value\\n    ) internal {\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\\n    }\\n\\n    /**\\n     * @dev Deprecated. This function has issues similar to the ones found in\\n     * {IERC20-approve}, and its usage is discouraged.\\n     *\\n     * Whenever possible, use {safeIncreaseAllowance} and\\n     * {safeDecreaseAllowance} instead.\\n     */\\n    function safeApprove(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        // safeApprove should only be called when setting an initial allowance,\\n        // or when resetting it to zero. To increase and decrease it, use\\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\\n        require(\\n            (value == 0) || (token.allowance(address(this), spender) == 0),\\n            \\\"SafeERC20: approve from non-zero to non-zero allowance\\\"\\n        );\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\\n    }\\n\\n    function safeIncreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n    }\\n\\n    function safeDecreaseAllowance(\\n        IERC20 token,\\n        address spender,\\n        uint256 value\\n    ) internal {\\n        unchecked {\\n            uint256 oldAllowance = token.allowance(address(this), spender);\\n            require(oldAllowance >= value, \\\"SafeERC20: decreased allowance below zero\\\");\\n            uint256 newAllowance = oldAllowance - value;\\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\\n        }\\n    }\\n\\n    /**\\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\\n     * @param token The token targeted by the call.\\n     * @param data The call data (encoded using abi.encode or one of its variants).\\n     */\\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\\n        // the target address contains contract code and also asserts for success in the low-level call.\\n\\n        bytes memory returndata = address(token).functionCall(data, \\\"SafeERC20: low-level call failed\\\");\\n        if (returndata.length > 0) {\\n            // Return data is optional\\n            require(abi.decode(returndata, (bool)), \\\"SafeERC20: ERC20 operation did not succeed\\\");\\n        }\\n    }\\n}\",\"keccak256\":\"0x3ed129ce99188978b1768041fbbaa51cb5c850113c7f33ccc43d19ce524c9dbe\",\"license\":\"MIT\"}},\"version\":1}",
  "bytecode": "0x608060405260006007553480156200001657600080fd5b5060405162001fd138038062001fd18339810160408190526200003991620000c6565b620000443362000076565b600180546001600160a01b039384166001600160a01b031991821617909155600280549290931691161790556200011d565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b60008060408385031215620000d9578182fd5b8251620000e68162000104565b6020840151909250620000f98162000104565b809150509250929050565b6001600160a01b03811681146200011a57600080fd5b50565b611ea4806200012d6000396000f3fe608060405234801561001057600080fd5b50600436106101735760003560e01c806378ed5d1f116100de57806398969e8211610097578063c346253d11610071578063c346253d14610375578063d1abb90714610388578063f2fde38b1461039b578063fbe6cf6a146103ae57600080fd5b806398969e821461033c578063ab7de0981461034f578063b60d42881461036257600080fd5b806378ed5d1f146102a257806388bba42f146102b55780638da5cb5b146102c85780638dbdbe6d146102d95780638f10369a146102ec57806393f1a40b146102f557600080fd5b8063228cb73311610130578063228cb733146102015780632f940c701461022c57806351eb05a61461023f57806357a5b58c1461027457806366da581514610287578063715018a61461029a57600080fd5b8063081e3eda146101785780630ad58d2f1461018f5780630e21750f146101a45780631526fe27146101b757806317caf6f1146101e557806318fccc76146101ee575b600080fd5b6003545b6040519081526020015b60405180910390f35b6101a261019d366004611bd7565b6103c1565b005b6101a26101b2366004611a8f565b61057a565b6101ca6101c5366004611b37565b6105f7565b60408051938452602084019290925290820152606001610186565b61017c60075481565b6101a26101fc366004611b67565b61062a565b600154610214906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b6101a261023a366004611b67565b6107dc565b61025261024d366004611b37565b610927565b6040805182518152602080840151908201529181015190820152606001610186565b6101a2610282366004611aab565b610b6b565b6101a2610295366004611b37565b610bbd565b6101a2610c22565b6102146102b0366004611b37565b610c58565b6101a26102c3366004611c04565b610c82565b6000546001600160a01b0316610214565b6101a26102e7366004611bd7565b610e21565b61017c60085481565b610327610303366004611b67565b60066020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610186565b61017c61034a366004611b67565b610fd2565b6101a261035d366004611b96565b6111b0565b600254610214906001600160a01b031681565b610214610383366004611b37565b611369565b6101a2610396366004611bd7565b611379565b6101a26103a9366004611a8f565b6115df565b6101a26103bc366004611a8f565b61167a565b60006103cc84610927565b6000858152600660209081526040808320338452909152902081519192509064e8d4a51000906103fc9086611d79565b6104069190611d59565b8160010160008282546104199190611d98565b9091555050805484908290600090610432908490611dd7565b9250508190555060006005868154811061045c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156104e25781546040516344af0fa760e01b81526001600160a01b038316916344af0fa7916104af918a9133918a9160009190600401611cd1565b600060405180830381600087803b1580156104c957600080fd5b505af11580156104dd573d6000803e3d6000fd5b505050505b61052484866004898154811061050857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906116c6565b836001600160a01b031686336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328860405161056a91815260200190565b60405180910390a4505050505050565b6000546001600160a01b031633146105ad5760405162461bcd60e51b81526004016105a490611c9c565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f1bbced6cc5125dba763681b1a276a950f551621431f63fdb5b2b180da1aa2ae390600090a250565b6003818154811061060757600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b600061063583610927565b6000848152600660209081526040808320338452909152812082518154939450909264e8d4a510009161066791611d79565b6106719190611d59565b905060008260010154826106859190611d98565b6001840183905560025460405163d66e57cd60e01b81526001600160a01b0388811660048301526024820184905292935091169063d66e57cd90604401600060405180830381600087803b1580156106dc57600080fd5b505af11580156106f0573d6000803e3d6000fd5b5050505060006005878154811061071757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050801561079c5783546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610769918b9133918c91899190600401611cd1565b600060405180830381600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050505b604051828152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a350505050505050565b6000828152600660209081526040808320338452909152812080548282556001820183905560058054929391928690811061082757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156108ac576040516344af0fa760e01b81526001600160a01b038216906344af0fa790610879908890339089906000908190600401611cd1565b600060405180830381600087803b15801561089357600080fd5b505af11580156108a7573d6000803e3d6000fd5b505050505b6108d284836004888154811061050857634e487b7160e01b600052603260045260246000fd5b836001600160a01b031685336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b8560405161091891815260200190565b60405180910390a45050505050565b61094b60405180606001604052806000815260200160008152602001600081525090565b6003828154811061096c57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201529150421115610b66576000600483815481106109cc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190611b4f565b90508015610ac9576000826020015142610a6a9190611dd7565b90506000600754846040015160085484610a849190611d79565b610a8e9190611d79565b610a989190611d59565b905082610aaa64e8d4a5100083611d79565b610ab49190611d59565b84518590610ac3908390611d41565b90525050505b4260208301526003805483919085908110610af457634e487b7160e01b600052603260045260246000fd5b600091825260209182902083516003929092020190815582820151600182015560409283015160029091015583810151845183519182529181018490529182015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b8060005b81811015610bb757610ba6848483818110610b9a57634e487b7160e01b600052603260045260246000fd5b90506020020135610927565b50610bb081611e1a565b9050610b6f565b50505050565b6000546001600160a01b03163314610be75760405162461bcd60e51b81526004016105a490611c9c565b60088190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b6000546001600160a01b03163314610c4c5760405162461bcd60e51b81526004016105a490611c9c565b610c566000611729565b565b60048181548110610c6857600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610cac5760405162461bcd60e51b81526004016105a490611c9c565b8260038581548110610cce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020154600754610ced9190611dd7565b610cf79190611d41565b6007819055508260038581548110610d1f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201819055508015610d8b578160058581548110610d5c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610dcb5760058481548110610db157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316610dcd565b815b6001600160a01b0316847f95895a6ab1df54420d241b55243258a33e61b2194db66c1179ec521aae8e18658584604051610e139291909182521515602082015260400190565b60405180910390a350505050565b6000610e2c84610927565b60008581526006602090815260408083206001600160a01b0387168452909152812080549293509185918391610e63908490611d41565b9091555050815164e8d4a5100090610e7b9086611d79565b610e859190611d59565b816001016000828254610e989190611d00565b92505081905550600060058681548110610ec257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508015610f485781546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610f15918a918991829160009190600401611cd1565b600060405180830381600087803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b505050505b610f8c33308760048a81548110610f6f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316929190611779565b836001600160a01b031686336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b478860405161056a91815260200190565b60008060038481548110610ff657634e487b7160e01b600052603260045260246000fd5b60009182526020808320604080516060810182526003909402909101805484526001810154848401526002015483820152878452600682528084206001600160a01b03881685529091528220815160048054939550919390929091908890811061107057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190611b4f565b905083602001514211801561110857508015155b1561117857600084602001514261111f9190611dd7565b905060006007548660400151600854846111399190611d79565b6111439190611d79565b61114d9190611d59565b90508261115f64e8d4a5100083611d79565b6111699190611d59565b6111739085611d41565b935050505b6001830154835464e8d4a5100090611191908590611d79565b61119b9190611d59565b6111a59190611d98565b979650505050505050565b6000546001600160a01b031633146111da5760405162461bcd60e51b81526004016105a490611c9c565b6111e3826117b1565b82600760008282546111f59190611d41565b909155505060048054600181810183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b038087166001600160a01b03199283168117909355600580548086019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805491871691909216811790915560408051606081018252600080825242602083019081529282018a8152600380548089018255928190529251919092027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81019190915591517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909101559254909161133191611dd7565b6040518681527f81ee0f8c5c46e2cb41984886f77a84181724abb86c32a5f6de539b07509d45e59060200160405180910390a4505050565b60058181548110610c6857600080fd5b600061138484610927565b6000858152600660209081526040808320338452909152812082518154939450909264e8d4a51000916113b691611d79565b6113c09190611d59565b905060008260010154826113d49190611d98565b845190915064e8d4a51000906113ea9088611d79565b6113f49190611d59565b6113fe9083611d98565b6001840155825486908490600090611417908490611dd7565b909155505060025460405163d66e57cd60e01b81526001600160a01b038781166004830152602482018490529091169063d66e57cd90604401600060405180830381600087803b15801561146a57600080fd5b505af115801561147e573d6000803e3d6000fd5b505050506000600588815481106114a557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050801561152a5783546040516344af0fa760e01b81526001600160a01b038316916344af0fa7916114f7918c9133918c91899190600401611cd1565b600060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b505050505b611550868860048b8154811061050857634e487b7160e01b600052603260045260246000fd5b856001600160a01b031688336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328a60405161159691815260200190565b60405180910390a4604051828152889033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050505050505050565b6000546001600160a01b031633146116095760405162461bcd60e51b81526004016105a490611c9c565b6001600160a01b03811661166e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a4565b61167781611729565b50565b60035460005b818110156116c1576000818152600660209081526040808320338452909152902054156116b1576116b1818461062a565b6116ba81611e1a565b9050611680565b505050565b6040516001600160a01b0383166024820152604481018290526116c190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611853565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610bb79085906323b872dd60e01b906084016116f2565b60035460005b818110156116c157826001600160a01b0316600482815481106117ea57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156118435760405162461bcd60e51b81526020600482015260136024820152726164643a206578697374696e6720706f6f6c3f60681b60448201526064016105a4565b61184c81611e1a565b90506117b7565b60006118a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119259092919063ffffffff16565b8051909150156116c157808060200190518101906118c69190611b1b565b6116c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105a4565b6060611934848460008561193e565b90505b9392505050565b60608247101561199f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105a4565b843b6119ed5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a4565b600080866001600160a01b03168587604051611a099190611c4d565b60006040518083038185875af1925050503d8060008114611a46576040519150601f19603f3d011682016040523d82523d6000602084013e611a4b565b606091505b50915091506111a582828660608315611a65575081611937565b825115611a755782518084602001fd5b8160405162461bcd60e51b81526004016105a49190611c69565b600060208284031215611aa0578081fd5b813561193781611e4b565b60008060208385031215611abd578081fd5b823567ffffffffffffffff80821115611ad4578283fd5b818501915085601f830112611ae7578283fd5b813581811115611af5578384fd5b8660208260051b8501011115611b09578384fd5b60209290920196919550909350505050565b600060208284031215611b2c578081fd5b815161193781611e60565b600060208284031215611b48578081fd5b5035919050565b600060208284031215611b60578081fd5b5051919050565b60008060408385031215611b79578182fd5b823591506020830135611b8b81611e4b565b809150509250929050565b600080600060608486031215611baa578081fd5b833592506020840135611bbc81611e4b565b91506040840135611bcc81611e4b565b809150509250925092565b600080600060608486031215611beb578283fd5b83359250602084013591506040840135611bcc81611e4b565b60008060008060808587031215611c19578081fd5b84359350602085013592506040850135611c3281611e4b565b91506060850135611c4281611e60565b939692955090935050565b60008251611c5f818460208701611dee565b9190910192915050565b6020815260008251806020840152611c88816040850160208701611dee565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b600080821280156001600160ff1b0384900385131615611d2257611d22611e35565b600160ff1b8390038412811615611d3b57611d3b611e35565b50500190565b60008219821115611d5457611d54611e35565b500190565b600082611d7457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d9357611d93611e35565b500290565b60008083128015600160ff1b850184121615611db657611db6611e35565b6001600160ff1b0384018313811615611dd157611dd1611e35565b50500390565b600082821015611de957611de9611e35565b500390565b60005b83811015611e09578181015183820152602001611df1565b83811115610bb75750506000910152565b6000600019821415611e2e57611e2e611e35565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461167757600080fd5b801515811461167757600080fdfea2646970667358221220f13dc9ac3867e7e614573aba6a2e9fb2766b3fd37acf70317cfa43d826b75ca664736f6c63430008040033",
  "deployedBytecode": "0x608060405234801561001057600080fd5b50600436106101735760003560e01c806378ed5d1f116100de57806398969e8211610097578063c346253d11610071578063c346253d14610375578063d1abb90714610388578063f2fde38b1461039b578063fbe6cf6a146103ae57600080fd5b806398969e821461033c578063ab7de0981461034f578063b60d42881461036257600080fd5b806378ed5d1f146102a257806388bba42f146102b55780638da5cb5b146102c85780638dbdbe6d146102d95780638f10369a146102ec57806393f1a40b146102f557600080fd5b8063228cb73311610130578063228cb733146102015780632f940c701461022c57806351eb05a61461023f57806357a5b58c1461027457806366da581514610287578063715018a61461029a57600080fd5b8063081e3eda146101785780630ad58d2f1461018f5780630e21750f146101a45780631526fe27146101b757806317caf6f1146101e557806318fccc76146101ee575b600080fd5b6003545b6040519081526020015b60405180910390f35b6101a261019d366004611bd7565b6103c1565b005b6101a26101b2366004611a8f565b61057a565b6101ca6101c5366004611b37565b6105f7565b60408051938452602084019290925290820152606001610186565b61017c60075481565b6101a26101fc366004611b67565b61062a565b600154610214906001600160a01b031681565b6040516001600160a01b039091168152602001610186565b6101a261023a366004611b67565b6107dc565b61025261024d366004611b37565b610927565b6040805182518152602080840151908201529181015190820152606001610186565b6101a2610282366004611aab565b610b6b565b6101a2610295366004611b37565b610bbd565b6101a2610c22565b6102146102b0366004611b37565b610c58565b6101a26102c3366004611c04565b610c82565b6000546001600160a01b0316610214565b6101a26102e7366004611bd7565b610e21565b61017c60085481565b610327610303366004611b67565b60066020908152600092835260408084209091529082529020805460019091015482565b60408051928352602083019190915201610186565b61017c61034a366004611b67565b610fd2565b6101a261035d366004611b96565b6111b0565b600254610214906001600160a01b031681565b610214610383366004611b37565b611369565b6101a2610396366004611bd7565b611379565b6101a26103a9366004611a8f565b6115df565b6101a26103bc366004611a8f565b61167a565b60006103cc84610927565b6000858152600660209081526040808320338452909152902081519192509064e8d4a51000906103fc9086611d79565b6104069190611d59565b8160010160008282546104199190611d98565b9091555050805484908290600090610432908490611dd7565b9250508190555060006005868154811061045c57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156104e25781546040516344af0fa760e01b81526001600160a01b038316916344af0fa7916104af918a9133918a9160009190600401611cd1565b600060405180830381600087803b1580156104c957600080fd5b505af11580156104dd573d6000803e3d6000fd5b505050505b61052484866004898154811061050857634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031691906116c6565b836001600160a01b031686336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328860405161056a91815260200190565b60405180910390a4505050505050565b6000546001600160a01b031633146105ad5760405162461bcd60e51b81526004016105a490611c9c565b60405180910390fd5b600280546001600160a01b0319166001600160a01b0383169081179091556040517f1bbced6cc5125dba763681b1a276a950f551621431f63fdb5b2b180da1aa2ae390600090a250565b6003818154811061060757600080fd5b600091825260209091206003909102018054600182015460029092015490925083565b600061063583610927565b6000848152600660209081526040808320338452909152812082518154939450909264e8d4a510009161066791611d79565b6106719190611d59565b905060008260010154826106859190611d98565b6001840183905560025460405163d66e57cd60e01b81526001600160a01b0388811660048301526024820184905292935091169063d66e57cd90604401600060405180830381600087803b1580156106dc57600080fd5b505af11580156106f0573d6000803e3d6000fd5b5050505060006005878154811061071757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050801561079c5783546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610769918b9133918c91899190600401611cd1565b600060405180830381600087803b15801561078357600080fd5b505af1158015610797573d6000803e3d6000fd5b505050505b604051828152879033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a350505050505050565b6000828152600660209081526040808320338452909152812080548282556001820183905560058054929391928690811061082757634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316905080156108ac576040516344af0fa760e01b81526001600160a01b038216906344af0fa790610879908890339089906000908190600401611cd1565b600060405180830381600087803b15801561089357600080fd5b505af11580156108a7573d6000803e3d6000fd5b505050505b6108d284836004888154811061050857634e487b7160e01b600052603260045260246000fd5b836001600160a01b031685336001600160a01b03167f2cac5e20e1541d836381527a43f651851e302817b71dc8e810284e69210c1c6b8560405161091891815260200190565b60405180910390a45050505050565b61094b60405180606001604052806000815260200160008152602001600081525090565b6003828154811061096c57634e487b7160e01b600052603260045260246000fd5b600091825260209182902060408051606081018252600390930290910180548352600181015493830184905260020154908201529150421115610b66576000600483815481106109cc57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b158015610a1857600080fd5b505afa158015610a2c573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a509190611b4f565b90508015610ac9576000826020015142610a6a9190611dd7565b90506000600754846040015160085484610a849190611d79565b610a8e9190611d79565b610a989190611d59565b905082610aaa64e8d4a5100083611d79565b610ab49190611d59565b84518590610ac3908390611d41565b90525050505b4260208301526003805483919085908110610af457634e487b7160e01b600052603260045260246000fd5b600091825260209182902083516003929092020190815582820151600182015560409283015160029091015583810151845183519182529181018490529182015283907fcb7325664a4a3b7c7223eefc492a97ca4fdf94d46884621e5a8fae5a04b2b9d29060600160405180910390a2505b919050565b8060005b81811015610bb757610ba6848483818110610b9a57634e487b7160e01b600052603260045260246000fd5b90506020020135610927565b50610bb081611e1a565b9050610b6f565b50505050565b6000546001600160a01b03163314610be75760405162461bcd60e51b81526004016105a490611c9c565b60088190556040518181527fde89cb17ac7f58f94792b3e91e086ed85403819c24ceea882491f960ccb1a2789060200160405180910390a150565b6000546001600160a01b03163314610c4c5760405162461bcd60e51b81526004016105a490611c9c565b610c566000611729565b565b60048181548110610c6857600080fd5b6000918252602090912001546001600160a01b0316905081565b6000546001600160a01b03163314610cac5760405162461bcd60e51b81526004016105a490611c9c565b8260038581548110610cce57634e487b7160e01b600052603260045260246000fd5b906000526020600020906003020160020154600754610ced9190611dd7565b610cf79190611d41565b6007819055508260038581548110610d1f57634e487b7160e01b600052603260045260246000fd5b9060005260206000209060030201600201819055508015610d8b578160058581548110610d5c57634e487b7160e01b600052603260045260246000fd5b9060005260206000200160006101000a8154816001600160a01b0302191690836001600160a01b031602179055505b80610dcb5760058481548110610db157634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316610dcd565b815b6001600160a01b0316847f95895a6ab1df54420d241b55243258a33e61b2194db66c1179ec521aae8e18658584604051610e139291909182521515602082015260400190565b60405180910390a350505050565b6000610e2c84610927565b60008581526006602090815260408083206001600160a01b0387168452909152812080549293509185918391610e63908490611d41565b9091555050815164e8d4a5100090610e7b9086611d79565b610e859190611d59565b816001016000828254610e989190611d00565b92505081905550600060058681548110610ec257634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031690508015610f485781546040516344af0fa760e01b81526001600160a01b038316916344af0fa791610f15918a918991829160009190600401611cd1565b600060405180830381600087803b158015610f2f57600080fd5b505af1158015610f43573d6000803e3d6000fd5b505050505b610f8c33308760048a81548110610f6f57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b0316929190611779565b836001600160a01b031686336001600160a01b03167f02d7e648dd130fc184d383e55bb126ac4c9c60e8f94bf05acdf557ba2d540b478860405161056a91815260200190565b60008060038481548110610ff657634e487b7160e01b600052603260045260246000fd5b60009182526020808320604080516060810182526003909402909101805484526001810154848401526002015483820152878452600682528084206001600160a01b03881685529091528220815160048054939550919390929091908890811061107057634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546040516370a0823160e01b81523060048201526001600160a01b03909116906370a082319060240160206040518083038186803b1580156110bc57600080fd5b505afa1580156110d0573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906110f49190611b4f565b905083602001514211801561110857508015155b1561117857600084602001514261111f9190611dd7565b905060006007548660400151600854846111399190611d79565b6111439190611d79565b61114d9190611d59565b90508261115f64e8d4a5100083611d79565b6111699190611d59565b6111739085611d41565b935050505b6001830154835464e8d4a5100090611191908590611d79565b61119b9190611d59565b6111a59190611d98565b979650505050505050565b6000546001600160a01b031633146111da5760405162461bcd60e51b81526004016105a490611c9c565b6111e3826117b1565b82600760008282546111f59190611d41565b909155505060048054600181810183557f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b90910180546001600160a01b038087166001600160a01b03199283168117909355600580548086019091557f036b6384b5eca791c62761152d0c79bb0604c104a5fb6f4eb0703f3154bb3db001805491871691909216811790915560408051606081018252600080825242602083019081529282018a8152600380548089018255928190529251919092027fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b81019190915591517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85c830155517fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85d909101559254909161133191611dd7565b6040518681527f81ee0f8c5c46e2cb41984886f77a84181724abb86c32a5f6de539b07509d45e59060200160405180910390a4505050565b60058181548110610c6857600080fd5b600061138484610927565b6000858152600660209081526040808320338452909152812082518154939450909264e8d4a51000916113b691611d79565b6113c09190611d59565b905060008260010154826113d49190611d98565b845190915064e8d4a51000906113ea9088611d79565b6113f49190611d59565b6113fe9083611d98565b6001840155825486908490600090611417908490611dd7565b909155505060025460405163d66e57cd60e01b81526001600160a01b038781166004830152602482018490529091169063d66e57cd90604401600060405180830381600087803b15801561146a57600080fd5b505af115801561147e573d6000803e3d6000fd5b505050506000600588815481106114a557634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b03169050801561152a5783546040516344af0fa760e01b81526001600160a01b038316916344af0fa7916114f7918c9133918c91899190600401611cd1565b600060405180830381600087803b15801561151157600080fd5b505af1158015611525573d6000803e3d6000fd5b505050505b611550868860048b8154811061050857634e487b7160e01b600052603260045260246000fd5b856001600160a01b031688336001600160a01b03167f8166bf25f8a2b7ed3c85049207da4358d16edbed977d23fa2ee6f0dde3ec21328a60405161159691815260200190565b60405180910390a4604051828152889033907f71bab65ced2e5750775a0613be067df48ef06cf92a496ebf7663ae06609249549060200160405180910390a35050505050505050565b6000546001600160a01b031633146116095760405162461bcd60e51b81526004016105a490611c9c565b6001600160a01b03811661166e5760405162461bcd60e51b815260206004820152602660248201527f4f776e61626c653a206e6577206f776e657220697320746865207a65726f206160448201526564647265737360d01b60648201526084016105a4565b61167781611729565b50565b60035460005b818110156116c1576000818152600660209081526040808320338452909152902054156116b1576116b1818461062a565b6116ba81611e1a565b9050611680565b505050565b6040516001600160a01b0383166024820152604481018290526116c190849063a9059cbb60e01b906064015b60408051601f198184030181529190526020810180516001600160e01b03166001600160e01b031990931692909217909152611853565b600080546001600160a01b038381166001600160a01b0319831681178455604051919092169283917f8be0079c531659141344cd1fd0a4f28419497f9722a3daafe3b4186f6b6457e09190a35050565b6040516001600160a01b0380851660248301528316604482015260648101829052610bb79085906323b872dd60e01b906084016116f2565b60035460005b818110156116c157826001600160a01b0316600482815481106117ea57634e487b7160e01b600052603260045260246000fd5b6000918252602090912001546001600160a01b031614156118435760405162461bcd60e51b81526020600482015260136024820152726164643a206578697374696e6720706f6f6c3f60681b60448201526064016105a4565b61184c81611e1a565b90506117b7565b60006118a8826040518060400160405280602081526020017f5361666545524332303a206c6f772d6c6576656c2063616c6c206661696c6564815250856001600160a01b03166119259092919063ffffffff16565b8051909150156116c157808060200190518101906118c69190611b1b565b6116c15760405162461bcd60e51b815260206004820152602a60248201527f5361666545524332303a204552433230206f7065726174696f6e20646964206e6044820152691bdd081cdd58d8d9595960b21b60648201526084016105a4565b6060611934848460008561193e565b90505b9392505050565b60608247101561199f5760405162461bcd60e51b815260206004820152602660248201527f416464726573733a20696e73756666696369656e742062616c616e636520666f6044820152651c8818d85b1b60d21b60648201526084016105a4565b843b6119ed5760405162461bcd60e51b815260206004820152601d60248201527f416464726573733a2063616c6c20746f206e6f6e2d636f6e747261637400000060448201526064016105a4565b600080866001600160a01b03168587604051611a099190611c4d565b60006040518083038185875af1925050503d8060008114611a46576040519150601f19603f3d011682016040523d82523d6000602084013e611a4b565b606091505b50915091506111a582828660608315611a65575081611937565b825115611a755782518084602001fd5b8160405162461bcd60e51b81526004016105a49190611c69565b600060208284031215611aa0578081fd5b813561193781611e4b565b60008060208385031215611abd578081fd5b823567ffffffffffffffff80821115611ad4578283fd5b818501915085601f830112611ae7578283fd5b813581811115611af5578384fd5b8660208260051b8501011115611b09578384fd5b60209290920196919550909350505050565b600060208284031215611b2c578081fd5b815161193781611e60565b600060208284031215611b48578081fd5b5035919050565b600060208284031215611b60578081fd5b5051919050565b60008060408385031215611b79578182fd5b823591506020830135611b8b81611e4b565b809150509250929050565b600080600060608486031215611baa578081fd5b833592506020840135611bbc81611e4b565b91506040840135611bcc81611e4b565b809150509250925092565b600080600060608486031215611beb578283fd5b83359250602084013591506040840135611bcc81611e4b565b60008060008060808587031215611c19578081fd5b84359350602085013592506040850135611c3281611e4b565b91506060850135611c4281611e60565b939692955090935050565b60008251611c5f818460208701611dee565b9190910192915050565b6020815260008251806020840152611c88816040850160208701611dee565b601f01601f19169190910160400192915050565b6020808252818101527f4f776e61626c653a2063616c6c6572206973206e6f7420746865206f776e6572604082015260600190565b9485526001600160a01b0393841660208601529190921660408401526060830191909152608082015260a00190565b600080821280156001600160ff1b0384900385131615611d2257611d22611e35565b600160ff1b8390038412811615611d3b57611d3b611e35565b50500190565b60008219821115611d5457611d54611e35565b500190565b600082611d7457634e487b7160e01b81526012600452602481fd5b500490565b6000816000190483118215151615611d9357611d93611e35565b500290565b60008083128015600160ff1b850184121615611db657611db6611e35565b6001600160ff1b0384018313811615611dd157611dd1611e35565b50500390565b600082821015611de957611de9611e35565b500390565b60005b83811015611e09578181015183820152602001611df1565b83811115610bb75750506000910152565b6000600019821415611e2e57611e2e611e35565b5060010190565b634e487b7160e01b600052601160045260246000fd5b6001600160a01b038116811461167757600080fd5b801515811461167757600080fdfea2646970667358221220f13dc9ac3867e7e614573aba6a2e9fb2766b3fd37acf70317cfa43d826b75ca664736f6c63430008040033",
  "devdoc": {
    "kind": "dev",
    "methods": {
      "add(uint256,address,address)": {
        "params": {
          "_lpToken": "Address of the LP ERC-20 token.",
          "_rewarder": "Address of the rewarder delegate.",
          "allocPoint": "AP of the new pool."
        }
      },
      "deposit(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to deposit.",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "The receiver of `amount` deposit benefit."
        }
      },
      "emergencyWithdraw(uint256,address)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens."
        }
      },
      "harvest(uint256,address)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of rewards."
        }
      },
      "massUpdatePools(uint256[])": {
        "params": {
          "pids": "Pool IDs of all to be updated. Make sure to update all active pools."
        }
      },
      "owner()": {
        "details": "Returns the address of the current owner."
      },
      "pendingReward(uint256,address)": {
        "params": {
          "_pid": "The index of the pool. See `poolInfo`.",
          "_user": "Address of user."
        },
        "returns": {
          "pending": "reward for a given user."
        }
      },
      "renounceOwnership()": {
        "details": "Leaves the contract without owner. It will not be possible to call `onlyOwner` functions anymore. Can only be called by the current owner. NOTE: Renouncing ownership will leave the contract without an owner, thereby removing any functionality that is only available to the owner."
      },
      "set(uint256,uint256,address,bool)": {
        "params": {
          "_allocPoint": "New AP of the pool.",
          "_pid": "The index of the pool. See `poolInfo`.",
          "_rewarder": "Address of the rewarder delegate.",
          "overwrite": "True if _rewarder should be `set`. Otherwise `_rewarder` is ignored."
        }
      },
      "setFund(address)": {
        "params": {
          "_fund": "The address of new fund contract."
        }
      },
      "setRewardPerSecond(uint256)": {
        "params": {
          "_rewardPerSecond": "The amount of reward to be distributed per second."
        }
      },
      "transferOwnership(address)": {
        "details": "Transfers ownership of the contract to a new account (`newOwner`). Can only be called by the current owner."
      },
      "updatePool(uint256)": {
        "params": {
          "pid": "The index of the pool. See `poolInfo`."
        },
        "returns": {
          "pool": "Returns the pool that was updated."
        }
      },
      "withdraw(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to withdraw.",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens."
        }
      },
      "withdrawAndHarvest(uint256,uint256,address)": {
        "params": {
          "amount": "LP token amount to withdraw.",
          "pid": "The index of the pool. See `poolInfo`.",
          "to": "Receiver of the LP tokens and rewards."
        }
      }
    },
    "stateVariables": {
      "totalAllocPoint": {
        "details": "Total allocation points. Must be the sum of all allocation points in all pools."
      }
    },
    "version": 1
  },
  "userdoc": {
    "kind": "user",
    "methods": {
      "add(uint256,address,address)": {
        "notice": "Add a new LP to the pool. Can only be called by the owner. DO NOT add the same LP token more than once. Rewards will be messed up if you do."
      },
      "deposit(uint256,uint256,address)": {
        "notice": "Deposit LP tokens to MCV2 for reward allocation."
      },
      "emergencyWithdraw(uint256,address)": {
        "notice": "Withdraw without caring about rewards. EMERGENCY ONLY."
      },
      "harvest(uint256,address)": {
        "notice": "Harvest proceeds for transaction sender to `to`."
      },
      "lpToken(uint256)": {
        "notice": "Address of the LP token for each MCV2 pool."
      },
      "massUpdatePools(uint256[])": {
        "notice": "Update reward variables for all pools. Be careful of gas spending!"
      },
      "pendingReward(uint256,address)": {
        "notice": "View function to see pending reward on frontend."
      },
      "poolInfo(uint256)": {
        "notice": "Info of each MCV2 pool."
      },
      "poolLength()": {
        "notice": "Returns the number of MCV2 pools."
      },
      "rewarder(uint256)": {
        "notice": "Address of each `IRewarder` contract in MCV2."
      },
      "set(uint256,uint256,address,bool)": {
        "notice": "Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner."
      },
      "setFund(address)": {
        "notice": "Set the new fund contract."
      },
      "setRewardPerSecond(uint256)": {
        "notice": "Sets the reward per second to be distributed. Can only be called by the owner."
      },
      "updatePool(uint256)": {
        "notice": "Update reward variables of the given pool."
      },
      "userInfo(uint256,address)": {
        "notice": "Info of each user that stakes LP tokens."
      },
      "withdraw(uint256,uint256,address)": {
        "notice": "Withdraw LP tokens from MCV2."
      },
      "withdrawAndHarvest(uint256,uint256,address)": {
        "notice": "Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`."
      }
    },
    "version": 1
  },
  "storageLayout": {
    "storage": [
      {
        "astId": 4280,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "_owner",
        "offset": 0,
        "slot": "0",
        "type": "t_address"
      },
      {
        "astId": 1267,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "reward",
        "offset": 0,
        "slot": "1",
        "type": "t_contract(IERC20)3144"
      },
      {
        "astId": 1270,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "fund",
        "offset": 0,
        "slot": "2",
        "type": "t_contract(IFundDistributor)3179"
      },
      {
        "astId": 1275,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "poolInfo",
        "offset": 0,
        "slot": "3",
        "type": "t_array(t_struct(PoolInfo)1264_storage)dyn_storage"
      },
      {
        "astId": 1280,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "lpToken",
        "offset": 0,
        "slot": "4",
        "type": "t_array(t_contract(IERC20)3144)dyn_storage"
      },
      {
        "astId": 1285,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "rewarder",
        "offset": 0,
        "slot": "5",
        "type": "t_array(t_contract(IRewarder)3299)dyn_storage"
      },
      {
        "astId": 1293,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "userInfo",
        "offset": 0,
        "slot": "6",
        "type": "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1257_storage))"
      },
      {
        "astId": 1297,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "totalAllocPoint",
        "offset": 0,
        "slot": "7",
        "type": "t_uint256"
      },
      {
        "astId": 1299,
        "contract": "contracts/RequiemChef.sol:RequiemChef",
        "label": "rewardPerSecond",
        "offset": 0,
        "slot": "8",
        "type": "t_uint256"
      }
    ],
    "types": {
      "t_address": {
        "encoding": "inplace",
        "label": "address",
        "numberOfBytes": "20"
      },
      "t_array(t_contract(IERC20)3144)dyn_storage": {
        "base": "t_contract(IERC20)3144",
        "encoding": "dynamic_array",
        "label": "contract IERC20[]",
        "numberOfBytes": "32"
      },
      "t_array(t_contract(IRewarder)3299)dyn_storage": {
        "base": "t_contract(IRewarder)3299",
        "encoding": "dynamic_array",
        "label": "contract IRewarder[]",
        "numberOfBytes": "32"
      },
      "t_array(t_struct(PoolInfo)1264_storage)dyn_storage": {
        "base": "t_struct(PoolInfo)1264_storage",
        "encoding": "dynamic_array",
        "label": "struct RequiemChef.PoolInfo[]",
        "numberOfBytes": "32"
      },
      "t_contract(IERC20)3144": {
        "encoding": "inplace",
        "label": "contract IERC20",
        "numberOfBytes": "20"
      },
      "t_contract(IFundDistributor)3179": {
        "encoding": "inplace",
        "label": "contract IFundDistributor",
        "numberOfBytes": "20"
      },
      "t_contract(IRewarder)3299": {
        "encoding": "inplace",
        "label": "contract IRewarder",
        "numberOfBytes": "20"
      },
      "t_int256": {
        "encoding": "inplace",
        "label": "int256",
        "numberOfBytes": "32"
      },
      "t_mapping(t_address,t_struct(UserInfo)1257_storage)": {
        "encoding": "mapping",
        "key": "t_address",
        "label": "mapping(address => struct RequiemChef.UserInfo)",
        "numberOfBytes": "32",
        "value": "t_struct(UserInfo)1257_storage"
      },
      "t_mapping(t_uint256,t_mapping(t_address,t_struct(UserInfo)1257_storage))": {
        "encoding": "mapping",
        "key": "t_uint256",
        "label": "mapping(uint256 => mapping(address => struct RequiemChef.UserInfo))",
        "numberOfBytes": "32",
        "value": "t_mapping(t_address,t_struct(UserInfo)1257_storage)"
      },
      "t_struct(PoolInfo)1264_storage": {
        "encoding": "inplace",
        "label": "struct RequiemChef.PoolInfo",
        "members": [
          {
            "astId": 1259,
            "contract": "contracts/RequiemChef.sol:RequiemChef",
            "label": "accRewardPerShare",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1261,
            "contract": "contracts/RequiemChef.sol:RequiemChef",
            "label": "lastRewardTime",
            "offset": 0,
            "slot": "1",
            "type": "t_uint256"
          },
          {
            "astId": 1263,
            "contract": "contracts/RequiemChef.sol:RequiemChef",
            "label": "allocPoint",
            "offset": 0,
            "slot": "2",
            "type": "t_uint256"
          }
        ],
        "numberOfBytes": "96"
      },
      "t_struct(UserInfo)1257_storage": {
        "encoding": "inplace",
        "label": "struct RequiemChef.UserInfo",
        "members": [
          {
            "astId": 1254,
            "contract": "contracts/RequiemChef.sol:RequiemChef",
            "label": "amount",
            "offset": 0,
            "slot": "0",
            "type": "t_uint256"
          },
          {
            "astId": 1256,
            "contract": "contracts/RequiemChef.sol:RequiemChef",
            "label": "rewardDebt",
            "offset": 0,
            "slot": "1",
            "type": "t_int256"
          }
        ],
        "numberOfBytes": "64"
      },
      "t_uint256": {
        "encoding": "inplace",
        "label": "uint256",
        "numberOfBytes": "32"
      }
    }
  }
}