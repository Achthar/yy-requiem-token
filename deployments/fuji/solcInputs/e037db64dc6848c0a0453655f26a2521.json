{
  "language": "Solidity",
  "sources": {
    "contracts/__mock/MockERC20.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"../libraries/ERC20.sol\";\n\ncontract MockERC20 is ERC20{\n    constructor(\n        string memory name,\n        string memory symbol\n    ) ERC20(name, symbol) {\n        super._mint(msg.sender, 1e27);\n    }\n\n    function mint(address _receiver, uint256 _amount) external {\n        _mint(_receiver, _amount);\n    }\n}\n"
    },
    "contracts/libraries/ERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"../interfaces/IERC20Metadata.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Implementation of the {IERC20} interface.\n *\n * This implementation is agnostic to the way tokens are created. This means\n * that a supply mechanism has to be added in a derived contract using {_mint}.\n * For a generic mechanism see {ERC20PresetMinterPauser}.\n *\n * TIP: For a detailed writeup see our guide\n * https://forum.zeppelin.solutions/t/how-to-implement-erc20-supply-mechanisms/226[How\n * to implement supply mechanisms].\n *\n * We have followed general OpenZeppelin Contracts guidelines: functions revert\n * instead returning `false` on failure. This behavior is nonetheless\n * conventional and does not conflict with the expectations of ERC20\n * applications.\n *\n * Additionally, an {Approval} event is emitted on calls to {transferFrom}.\n * This allows applications to reconstruct the allowance for all accounts just\n * by listening to said events. Other implementations of the EIP may not emit\n * these events, as it isn't required by the specification.\n *\n * Finally, the non-standard {decreaseAllowance} and {increaseAllowance}\n * functions have been added to mitigate the well-known issues around setting\n * allowances. See {IERC20-approve}.\n */\ncontract ERC20 is Context, IERC20, IERC20Metadata {\n    mapping(address => uint256) private _balances;\n\n    mapping(address => mapping(address => uint256)) private _allowances;\n\n    uint256 private _totalSupply;\n\n    string private _name;\n    string private _symbol;\n\n    /**\n     * @dev Sets the values for {name} and {symbol}.\n     *\n     * The default value of {decimals} is 18. To select a different value for\n     * {decimals} you should overload it.\n     *\n     * All two of these values are immutable: they can only be set once during\n     * construction.\n     */\n    constructor(string memory name_, string memory symbol_) {\n        _name = name_;\n        _symbol = symbol_;\n    }\n\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() public view virtual override returns (string memory) {\n        return _name;\n    }\n\n    /**\n     * @dev Returns the symbol of the token, usually a shorter version of the\n     * name.\n     */\n    function symbol() public view virtual override returns (string memory) {\n        return _symbol;\n    }\n\n    /**\n     * @dev Returns the number of decimals used to get its user representation.\n     * For example, if `decimals` equals `2`, a balance of `505` tokens should\n     * be displayed to a user as `5.05` (`505 / 10 ** 2`).\n     *\n     * Tokens usually opt for a value of 18, imitating the relationship between\n     * Ether and Wei. This is the value {ERC20} uses, unless this function is\n     * overridden;\n     *\n     * NOTE: This information is only used for _display_ purposes: it in\n     * no way affects any of the arithmetic of the contract, including\n     * {IERC20-balanceOf} and {IERC20-transfer}.\n     */\n    function decimals() public view virtual override returns (uint8) {\n        return 18;\n    }\n\n    /**\n     * @dev See {IERC20-totalSupply}.\n     */\n    function totalSupply() public view virtual override returns (uint256) {\n        return _totalSupply;\n    }\n\n    /**\n     * @dev See {IERC20-balanceOf}.\n     */\n    function balanceOf(address account) public view virtual override returns (uint256) {\n        return _balances[account];\n    }\n\n    /**\n     * @dev See {IERC20-transfer}.\n     *\n     * Requirements:\n     *\n     * - `recipient` cannot be the zero address.\n     * - the caller must have a balance of at least `amount`.\n     */\n    function transfer(address recipient, uint256 amount) public virtual override returns (bool) {\n        _transfer(_msgSender(), recipient, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-allowance}.\n     */\n    function allowance(address owner, address spender) public view virtual override returns (uint256) {\n        return _allowances[owner][spender];\n    }\n\n    /**\n     * @dev See {IERC20-approve}.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function approve(address spender, uint256 amount) public virtual override returns (bool) {\n        _approve(_msgSender(), spender, amount);\n        return true;\n    }\n\n    /**\n     * @dev See {IERC20-transferFrom}.\n     *\n     * Emits an {Approval} event indicating the updated allowance. This is not\n     * required by the EIP. See the note at the beginning of {ERC20}.\n     *\n     * Requirements:\n     *\n     * - `sender` and `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     * - the caller must have allowance for ``sender``'s tokens of at least\n     * `amount`.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) public virtual override returns (bool) {\n        _transfer(sender, recipient, amount);\n\n        uint256 currentAllowance = _allowances[sender][_msgSender()];\n        require(currentAllowance >= amount, \"ERC20: transfer amount exceeds allowance\");\n        unchecked {\n            _approve(sender, _msgSender(), currentAllowance - amount);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Atomically increases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     */\n    function increaseAllowance(address spender, uint256 addedValue) public virtual returns (bool) {\n        _approve(_msgSender(), spender, _allowances[_msgSender()][spender] + addedValue);\n        return true;\n    }\n\n    /**\n     * @dev Atomically decreases the allowance granted to `spender` by the caller.\n     *\n     * This is an alternative to {approve} that can be used as a mitigation for\n     * problems described in {IERC20-approve}.\n     *\n     * Emits an {Approval} event indicating the updated allowance.\n     *\n     * Requirements:\n     *\n     * - `spender` cannot be the zero address.\n     * - `spender` must have allowance for the caller of at least\n     * `subtractedValue`.\n     */\n    function decreaseAllowance(address spender, uint256 subtractedValue) public virtual returns (bool) {\n        uint256 currentAllowance = _allowances[_msgSender()][spender];\n        require(currentAllowance >= subtractedValue, \"ERC20: decreased allowance below zero\");\n        unchecked {\n            _approve(_msgSender(), spender, currentAllowance - subtractedValue);\n        }\n\n        return true;\n    }\n\n    /**\n     * @dev Moves `amount` of tokens from `sender` to `recipient`.\n     *\n     * This internal function is equivalent to {transfer}, and can be used to\n     * e.g. implement automatic token fees, slashing mechanisms, etc.\n     *\n     * Emits a {Transfer} event.\n     *\n     * Requirements:\n     *\n     * - `sender` cannot be the zero address.\n     * - `recipient` cannot be the zero address.\n     * - `sender` must have a balance of at least `amount`.\n     */\n    function _transfer(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) internal virtual {\n        require(sender != address(0), \"ERC20: transfer from the zero address\");\n        require(recipient != address(0), \"ERC20: transfer to the zero address\");\n\n        _beforeTokenTransfer(sender, recipient, amount);\n\n        uint256 senderBalance = _balances[sender];\n        require(senderBalance >= amount, \"ERC20: transfer amount exceeds balance\");\n        unchecked {\n            _balances[sender] = senderBalance - amount;\n        }\n        _balances[recipient] += amount;\n\n        emit Transfer(sender, recipient, amount);\n\n        _afterTokenTransfer(sender, recipient, amount);\n    }\n\n    /** @dev Creates `amount` tokens and assigns them to `account`, increasing\n     * the total supply.\n     *\n     * Emits a {Transfer} event with `from` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     */\n    function _mint(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: mint to the zero address\");\n\n        _beforeTokenTransfer(address(0), account, amount);\n\n        _totalSupply += amount;\n        _balances[account] += amount;\n        emit Transfer(address(0), account, amount);\n\n        _afterTokenTransfer(address(0), account, amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, reducing the\n     * total supply.\n     *\n     * Emits a {Transfer} event with `to` set to the zero address.\n     *\n     * Requirements:\n     *\n     * - `account` cannot be the zero address.\n     * - `account` must have at least `amount` tokens.\n     */\n    function _burn(address account, uint256 amount) internal virtual {\n        require(account != address(0), \"ERC20: burn from the zero address\");\n\n        _beforeTokenTransfer(account, address(0), amount);\n\n        uint256 accountBalance = _balances[account];\n        require(accountBalance >= amount, \"ERC20: burn amount exceeds balance\");\n        unchecked {\n            _balances[account] = accountBalance - amount;\n        }\n        _totalSupply -= amount;\n\n        emit Transfer(account, address(0), amount);\n\n        _afterTokenTransfer(account, address(0), amount);\n    }\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the `owner` s tokens.\n     *\n     * This internal function is equivalent to `approve`, and can be used to\n     * e.g. set automatic allowances for certain subsystems, etc.\n     *\n     * Emits an {Approval} event.\n     *\n     * Requirements:\n     *\n     * - `owner` cannot be the zero address.\n     * - `spender` cannot be the zero address.\n     */\n    function _approve(\n        address owner,\n        address spender,\n        uint256 amount\n    ) internal virtual {\n        require(owner != address(0), \"ERC20: approve from the zero address\");\n        require(spender != address(0), \"ERC20: approve to the zero address\");\n\n        _allowances[owner][spender] = amount;\n        emit Approval(owner, spender, amount);\n    }\n\n    /**\n     * @dev Hook that is called before any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * will be transferred to `to`.\n     * - when `from` is zero, `amount` tokens will be minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens will be burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _beforeTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n\n    /**\n     * @dev Hook that is called after any transfer of tokens. This includes\n     * minting and burning.\n     *\n     * Calling conditions:\n     *\n     * - when `from` and `to` are both non-zero, `amount` of ``from``'s tokens\n     * has been transferred to `to`.\n     * - when `from` is zero, `amount` tokens have been minted for `to`.\n     * - when `to` is zero, `amount` of ``from``'s tokens have been burned.\n     * - `from` and `to` are never both zero.\n     *\n     * To learn more about hooks, head to xref:ROOT:extending-contracts.adoc#using-hooks[Using Hooks].\n     */\n    function _afterTokenTransfer(\n        address from,\n        address to,\n        uint256 amount\n    ) internal virtual {}\n}"
    },
    "contracts/interfaces/IERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Interface of the ERC20 standard as defined in the EIP.\n */\ninterface IERC20 {\n    /**\n     * @dev Returns the amount of tokens in existence.\n     */\n    function totalSupply() external view returns (uint256);\n\n    /**\n     * @dev Returns the amount of tokens owned by `account`.\n     */\n    function balanceOf(address account) external view returns (uint256);\n\n    /**\n     * @dev Moves `amount` tokens from the caller's account to `recipient`.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transfer(address recipient, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Returns the remaining number of tokens that `spender` will be\n     * allowed to spend on behalf of `owner` through {transferFrom}. This is\n     * zero by default.\n     *\n     * This value changes when {approve} or {transferFrom} are called.\n     */\n    function allowance(address owner, address spender) external view returns (uint256);\n\n    /**\n     * @dev Sets `amount` as the allowance of `spender` over the caller's tokens.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * IMPORTANT: Beware that changing an allowance with this method brings the risk\n     * that someone may use both the old and the new allowance by unfortunate\n     * transaction ordering. One possible solution to mitigate this race\n     * condition is to first reduce the spender's allowance to 0 and set the\n     * desired value afterwards:\n     * https://github.com/ethereum/EIPs/issues/20#issuecomment-263524729\n     *\n     * Emits an {Approval} event.\n     */\n    function approve(address spender, uint256 amount) external returns (bool);\n\n    /**\n     * @dev Moves `amount` tokens from `sender` to `recipient` using the\n     * allowance mechanism. `amount` is then deducted from the caller's\n     * allowance.\n     *\n     * Returns a boolean value indicating whether the operation succeeded.\n     *\n     * Emits a {Transfer} event.\n     */\n    function transferFrom(\n        address sender,\n        address recipient,\n        uint256 amount\n    ) external returns (bool);\n\n    /**\n     * @dev Emitted when `value` tokens are moved from one account (`from`) to\n     * another (`to`).\n     *\n     * Note that `value` may be zero.\n     */\n    event Transfer(address indexed from, address indexed to, uint256 value);\n\n    /**\n     * @dev Emitted when the allowance of a `spender` for an `owner` is set by\n     * a call to {approve}. `value` is the new allowance.\n     */\n    event Approval(address indexed owner, address indexed spender, uint256 value);\n}"
    },
    "contracts/interfaces/IERC20Metadata.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./IERC20.sol\";\n\n/**\n * @dev Interface for the optional metadata functions from the ERC20 standard.\n *\n * _Available since v4.1._\n */\ninterface IERC20Metadata is IERC20 {\n    /**\n     * @dev Returns the name of the token.\n     */\n    function name() external view returns (string memory);\n\n    /**\n     * @dev Returns the symbol of the token.\n     */\n    function symbol() external view returns (string memory);\n\n    /**\n     * @dev Returns the decimals places of the token.\n     */\n    function decimals() external view returns (uint8);\n}"
    },
    "contracts/libraries/Context.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Provides information about the current execution context, including the\n * sender of the transaction and its data. While these are generally available\n * via msg.sender and msg.data, they should not be accessed in such a direct\n * manner, since when dealing with meta-transactions the account sending and\n * paying for execution may not be the actual sender (as far as an application\n * is concerned).\n *\n * This contract is only required for intermediate, library-like contracts.\n */\nabstract contract Context {\n    function _msgSender() internal view virtual returns (address) {\n        return msg.sender;\n    }\n\n    function _msgData() internal view virtual returns (bytes calldata) {\n        return msg.data;\n    }\n}"
    },
    "contracts/FundDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./libraries/SafeMath.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/ERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./interfaces/IRewardToken.sol\";\n\ncontract FundDistributor is Ownable, Initializable {\n    using SafeMath for uint256;\n    using SafeERC20 for IRewardToken;\n\n    IRewardToken public reward;\n    uint256 public missingDecimals;\n\n    // CONTRACTS\n    mapping(address => bool) public requesters;\n\n    /* ========== MODIFIER ========== */\n\n    modifier onlyRequester() {\n        require(requesters[_msgSender()], \"Only pool can request transfer\");\n        _;\n    }\n\n    function initialize(address _reward) external initializer {\n        reward = IRewardToken(_reward);\n        missingDecimals = 18 - ERC20(_reward).decimals();\n    }\n\n    /* ========== MUTATIVE ====================== */\n\n    function distributeTo(\n        address _receiver,\n        uint256 _amount\n    ) public onlyRequester {\n        require(_receiver != address(0), \"Invalid address\");\n        if (_amount > 0) {\n            reward.mint(_receiver, _amount.div(10**missingDecimals));\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function addRequester(address _requester) external onlyOwner {\n        require(!requesters[_requester], \"requester existed\");\n        requesters[_requester] = true;\n        emit RequesterAdded(_requester);\n    }\n\n    function removeRequester(address _requester) external onlyOwner {\n        require(requesters[_requester], \"requester not found\");\n        delete requesters[_requester];\n        emit RequesterRemoved(_requester);\n    }\n\n    /* ========== EVENTS ========================= */\n\n    event RequesterAdded(address indexed requester);\n    event RequesterRemoved(address indexed requester);\n    event FundRequested(uint256 indexed amount);\n}\n"
    },
    "contracts/libraries/Ownable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./Context.sol\";\n\n/**\n * @dev Contract module which provides a basic access control mechanism, where\n * there is an account (an owner) that can be granted exclusive access to\n * specific functions.\n *\n * By default, the owner account will be the one that deploys the contract. This\n * can later be changed with {transferOwnership}.\n *\n * This module is used through inheritance. It will make available the modifier\n * `onlyOwner`, which can be applied to your functions to restrict their use to\n * the owner.\n */\nabstract contract Ownable is Context {\n    address private _owner;\n\n    event OwnershipTransferred(address indexed previousOwner, address indexed newOwner);\n\n    /**\n     * @dev Initializes the contract setting the deployer as the initial owner.\n     */\n    constructor() {\n        _transferOwnership(_msgSender());\n    }\n\n    /**\n     * @dev Returns the address of the current owner.\n     */\n    function owner() public view virtual returns (address) {\n        return _owner;\n    }\n\n    /**\n     * @dev Throws if called by any account other than the owner.\n     */\n    modifier onlyOwner() {\n        require(owner() == _msgSender(), \"Ownable: caller is not the owner\");\n        _;\n    }\n\n    /**\n     * @dev Leaves the contract without owner. It will not be possible to call\n     * `onlyOwner` functions anymore. Can only be called by the current owner.\n     *\n     * NOTE: Renouncing ownership will leave the contract without an owner,\n     * thereby removing any functionality that is only available to the owner.\n     */\n    function renounceOwnership() public virtual onlyOwner {\n        _transferOwnership(address(0));\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Can only be called by the current owner.\n     */\n    function transferOwnership(address newOwner) public virtual onlyOwner {\n        require(newOwner != address(0), \"Ownable: new owner is the zero address\");\n        _transferOwnership(newOwner);\n    }\n\n    /**\n     * @dev Transfers ownership of the contract to a new account (`newOwner`).\n     * Internal function without access restriction.\n     */\n    function _transferOwnership(address newOwner) internal virtual {\n        address oldOwner = _owner;\n        _owner = newOwner;\n        emit OwnershipTransferred(oldOwner, newOwner);\n    }\n}"
    },
    "contracts/libraries/Initializable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev This is a base contract to aid in writing upgradeable contracts, or any kind of contract that will be deployed\n * behind a proxy. Since a proxied contract can't have a constructor, it's common to move constructor logic to an\n * external initializer function, usually called `initialize`. It then becomes necessary to protect this initializer\n * function so it can only be called once. The {initializer} modifier provided by this contract will have this effect.\n *\n * TIP: To avoid leaving the proxy in an uninitialized state, the initializer function should be called as early as\n * possible by providing the encoded function call as the `_data` argument to {ERC1967Proxy-constructor}.\n *\n * CAUTION: When used with inheritance, manual care must be taken to not invoke a parent initializer twice, or to ensure\n * that all initializers are idempotent. This is not verified automatically as constructors are by Solidity.\n *\n * [CAUTION]\n * ====\n * Avoid leaving a contract uninitialized.\n *\n * An uninitialized contract can be taken over by an attacker. This applies to both a proxy and its implementation\n * contract, which may impact the proxy. To initialize the implementation contract, you can either invoke the\n * initializer manually, or you can include a constructor to automatically mark it as initialized when it is deployed:\n *\n * [.hljs-theme-light.nopadding]\n * ```\n * /// @custom:oz-upgrades-unsafe-allow constructor\n * constructor() initializer {}\n * ```\n * ====\n */\nabstract contract Initializable {\n    /**\n     * @dev Indicates that the contract has been initialized.\n     */\n    bool private _initialized;\n\n    /**\n     * @dev Indicates that the contract is in the process of being initialized.\n     */\n    bool private _initializing;\n\n    /**\n     * @dev Modifier to protect an initializer function from being invoked twice.\n     */\n    modifier initializer() {\n        require(_initializing || !_initialized, \"Initializable: contract is already initialized\");\n\n        bool isTopLevelCall = !_initializing;\n        if (isTopLevelCall) {\n            _initializing = true;\n            _initialized = true;\n        }\n\n        _;\n\n        if (isTopLevelCall) {\n            _initializing = false;\n        }\n    }\n}"
    },
    "contracts/libraries/SafeMath.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n// CAUTION\n// This version of SafeMath should only be used with Solidity 0.8 or later,\n// because it relies on the compiler's built in overflow checks.\n\n/**\n * @dev Wrappers over Solidity's arithmetic operations.\n *\n * NOTE: `SafeMath` is generally not needed starting with Solidity 0.8, since the compiler\n * now has built in overflow checking.\n */\nlibrary SafeMath {\n    /**\n     * @dev Returns the addition of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryAdd(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            uint256 c = a + b;\n            if (c < a) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the substraction of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function trySub(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b > a) return (false, 0);\n            return (true, a - b);\n        }\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, with an overflow flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMul(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            // Gas optimization: this is cheaper than requiring 'a' not being zero, but the\n            // benefit is lost if 'b' is also tested.\n            // See: https://github.com/OpenZeppelin/openzeppelin-contracts/pull/522\n            if (a == 0) return (true, 0);\n            uint256 c = a * b;\n            if (c / a != b) return (false, 0);\n            return (true, c);\n        }\n    }\n\n    /**\n     * @dev Returns the division of two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryDiv(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a / b);\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers, with a division by zero flag.\n     *\n     * _Available since v3.4._\n     */\n    function tryMod(uint256 a, uint256 b) internal pure returns (bool, uint256) {\n        unchecked {\n            if (b == 0) return (false, 0);\n            return (true, a % b);\n        }\n    }\n\n    /**\n     * @dev Returns the addition of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `+` operator.\n     *\n     * Requirements:\n     *\n     * - Addition cannot overflow.\n     */\n    function add(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a + b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting on\n     * overflow (when the result is negative).\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a - b;\n    }\n\n    /**\n     * @dev Returns the multiplication of two unsigned integers, reverting on\n     * overflow.\n     *\n     * Counterpart to Solidity's `*` operator.\n     *\n     * Requirements:\n     *\n     * - Multiplication cannot overflow.\n     */\n    function mul(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a * b;\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator.\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a / b;\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting when dividing by zero.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(uint256 a, uint256 b) internal pure returns (uint256) {\n        return a % b;\n    }\n\n    /**\n     * @dev Returns the subtraction of two unsigned integers, reverting with custom message on\n     * overflow (when the result is negative).\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {trySub}.\n     *\n     * Counterpart to Solidity's `-` operator.\n     *\n     * Requirements:\n     *\n     * - Subtraction cannot overflow.\n     */\n    function sub(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b <= a, errorMessage);\n            return a - b;\n        }\n    }\n\n    /**\n     * @dev Returns the integer division of two unsigned integers, reverting with custom message on\n     * division by zero. The result is rounded towards zero.\n     *\n     * Counterpart to Solidity's `/` operator. Note: this function uses a\n     * `revert` opcode (which leaves remaining gas untouched) while Solidity\n     * uses an invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function div(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a / b;\n        }\n    }\n\n    /**\n     * @dev Returns the remainder of dividing two unsigned integers. (unsigned integer modulo),\n     * reverting with custom message when dividing by zero.\n     *\n     * CAUTION: This function is deprecated because it requires allocating memory for the error\n     * message unnecessarily. For custom revert reasons use {tryMod}.\n     *\n     * Counterpart to Solidity's `%` operator. This function uses a `revert`\n     * opcode (which leaves remaining gas untouched) while Solidity uses an\n     * invalid opcode to revert (consuming all remaining gas).\n     *\n     * Requirements:\n     *\n     * - The divisor cannot be zero.\n     */\n    function mod(\n        uint256 a,\n        uint256 b,\n        string memory errorMessage\n    ) internal pure returns (uint256) {\n        unchecked {\n            require(b > 0, errorMessage);\n            return a % b;\n        }\n    }\n}"
    },
    "contracts/libraries/SafeERC20.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"../interfaces/IERC20.sol\";\nimport \"./Address.sol\";\n\n/**\n * @title SafeERC20\n * @dev Wrappers around ERC20 operations that throw on failure (when the token\n * contract returns false). Tokens that return no value (and instead revert or\n * throw on failure) are also supported, non-reverting calls are assumed to be\n * successful.\n * To use this library you can add a `using SafeERC20 for IERC20;` statement to your contract,\n * which allows you to call the safe operations as `token.safeTransfer(...)`, etc.\n */\nlibrary SafeERC20 {\n    using Address for address;\n\n    function safeTransfer(\n        IERC20 token,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transfer.selector, to, value));\n    }\n\n    function safeTransferFrom(\n        IERC20 token,\n        address from,\n        address to,\n        uint256 value\n    ) internal {\n        _callOptionalReturn(token, abi.encodeWithSelector(token.transferFrom.selector, from, to, value));\n    }\n\n    /**\n     * @dev Deprecated. This function has issues similar to the ones found in\n     * {IERC20-approve}, and its usage is discouraged.\n     *\n     * Whenever possible, use {safeIncreaseAllowance} and\n     * {safeDecreaseAllowance} instead.\n     */\n    function safeApprove(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        // safeApprove should only be called when setting an initial allowance,\n        // or when resetting it to zero. To increase and decrease it, use\n        // 'safeIncreaseAllowance' and 'safeDecreaseAllowance'\n        require(\n            (value == 0) || (token.allowance(address(this), spender) == 0),\n            \"SafeERC20: approve from non-zero to non-zero allowance\"\n        );\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, value));\n    }\n\n    function safeIncreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        uint256 newAllowance = token.allowance(address(this), spender) + value;\n        _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n    }\n\n    function safeDecreaseAllowance(\n        IERC20 token,\n        address spender,\n        uint256 value\n    ) internal {\n        unchecked {\n            uint256 oldAllowance = token.allowance(address(this), spender);\n            require(oldAllowance >= value, \"SafeERC20: decreased allowance below zero\");\n            uint256 newAllowance = oldAllowance - value;\n            _callOptionalReturn(token, abi.encodeWithSelector(token.approve.selector, spender, newAllowance));\n        }\n    }\n\n    /**\n     * @dev Imitates a Solidity high-level call (i.e. a regular function call to a contract), relaxing the requirement\n     * on the return value: the return value is optional (but if data is returned, it must not be false).\n     * @param token The token targeted by the call.\n     * @param data The call data (encoded using abi.encode or one of its variants).\n     */\n    function _callOptionalReturn(IERC20 token, bytes memory data) private {\n        // We need to perform a low level call here, to bypass Solidity's return data size checking mechanism, since\n        // we're implementing it ourselves. We use {Address.functionCall} to perform this call, which verifies that\n        // the target address contains contract code and also asserts for success in the low-level call.\n\n        bytes memory returndata = address(token).functionCall(data, \"SafeERC20: low-level call failed\");\n        if (returndata.length > 0) {\n            // Return data is optional\n            require(abi.decode(returndata, (bool)), \"SafeERC20: ERC20 operation did not succeed\");\n        }\n    }\n}"
    },
    "contracts/interfaces/IRewardToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRewardToken is IERC20 {\n    function mint(address _recipient, uint256 _amount) external;\n}\n"
    },
    "contracts/libraries/Address.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\n/**\n * @dev Collection of functions related to the address type\n */\nlibrary Address {\n    /**\n     * @dev Returns true if `account` is a contract.\n     *\n     * [IMPORTANT]\n     * ====\n     * It is unsafe to assume that an address for which this function returns\n     * false is an externally-owned account (EOA) and not a contract.\n     *\n     * Among others, `isContract` will return false for the following\n     * types of addresses:\n     *\n     *  - an externally-owned account\n     *  - a contract in construction\n     *  - an address where a contract will be created\n     *  - an address where a contract lived, but was destroyed\n     * ====\n     */\n    function isContract(address account) internal view returns (bool) {\n        // This method relies on extcodesize, which returns 0 for contracts in\n        // construction, since the code is only stored at the end of the\n        // constructor execution.\n\n        uint256 size;\n        assembly {\n            size := extcodesize(account)\n        }\n        return size > 0;\n    }\n\n    /**\n     * @dev Replacement for Solidity's `transfer`: sends `amount` wei to\n     * `recipient`, forwarding all available gas and reverting on errors.\n     *\n     * https://eips.ethereum.org/EIPS/eip-1884[EIP1884] increases the gas cost\n     * of certain opcodes, possibly making contracts go over the 2300 gas limit\n     * imposed by `transfer`, making them unable to receive funds via\n     * `transfer`. {sendValue} removes this limitation.\n     *\n     * https://diligence.consensys.net/posts/2019/09/stop-using-soliditys-transfer-now/[Learn more].\n     *\n     * IMPORTANT: because control is transferred to `recipient`, care must be\n     * taken to not create reentrancy vulnerabilities. Consider using\n     * {ReentrancyGuard} or the\n     * https://solidity.readthedocs.io/en/v0.5.11/security-considerations.html#use-the-checks-effects-interactions-pattern[checks-effects-interactions pattern].\n     */\n    function sendValue(address payable recipient, uint256 amount) internal {\n        require(address(this).balance >= amount, \"Address: insufficient balance\");\n\n        (bool success, ) = recipient.call{value: amount}(\"\");\n        require(success, \"Address: unable to send value, recipient may have reverted\");\n    }\n\n    /**\n     * @dev Performs a Solidity function call using a low level `call`. A\n     * plain `call` is an unsafe replacement for a function call: use this\n     * function instead.\n     *\n     * If `target` reverts with a revert reason, it is bubbled up by this\n     * function (like regular Solidity function calls).\n     *\n     * Returns the raw returned data. To convert to the expected return value,\n     * use https://solidity.readthedocs.io/en/latest/units-and-global-variables.html?highlight=abi.decode#abi-encoding-and-decoding-functions[`abi.decode`].\n     *\n     * Requirements:\n     *\n     * - `target` must be a contract.\n     * - calling `target` with `data` must not revert.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionCall(target, data, \"Address: low-level call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`], but with\n     * `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, 0, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but also transferring `value` wei to `target`.\n     *\n     * Requirements:\n     *\n     * - the calling contract must have an ETH balance of at least `value`.\n     * - the called Solidity function must be `payable`.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value\n    ) internal returns (bytes memory) {\n        return functionCallWithValue(target, data, value, \"Address: low-level call with value failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCallWithValue-address-bytes-uint256-}[`functionCallWithValue`], but\n     * with `errorMessage` as a fallback revert reason when `target` reverts.\n     *\n     * _Available since v3.1._\n     */\n    function functionCallWithValue(\n        address target,\n        bytes memory data,\n        uint256 value,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(address(this).balance >= value, \"Address: insufficient balance for call\");\n        require(isContract(target), \"Address: call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.call{value: value}(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(address target, bytes memory data) internal view returns (bytes memory) {\n        return functionStaticCall(target, data, \"Address: low-level static call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a static call.\n     *\n     * _Available since v3.3._\n     */\n    function functionStaticCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal view returns (bytes memory) {\n        require(isContract(target), \"Address: static call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.staticcall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(address target, bytes memory data) internal returns (bytes memory) {\n        return functionDelegateCall(target, data, \"Address: low-level delegate call failed\");\n    }\n\n    /**\n     * @dev Same as {xref-Address-functionCall-address-bytes-string-}[`functionCall`],\n     * but performing a delegate call.\n     *\n     * _Available since v3.4._\n     */\n    function functionDelegateCall(\n        address target,\n        bytes memory data,\n        string memory errorMessage\n    ) internal returns (bytes memory) {\n        require(isContract(target), \"Address: delegate call to non-contract\");\n\n        (bool success, bytes memory returndata) = target.delegatecall(data);\n        return verifyCallResult(success, returndata, errorMessage);\n    }\n\n    /**\n     * @dev Tool to verifies that a low level call was successful, and revert if it wasn't, either by bubbling the\n     * revert reason using the provided one.\n     *\n     * _Available since v4.3._\n     */\n    function verifyCallResult(\n        bool success,\n        bytes memory returndata,\n        string memory errorMessage\n    ) internal pure returns (bytes memory) {\n        if (success) {\n            return returndata;\n        } else {\n            // Look for revert reason and bubble it up if present\n            if (returndata.length > 0) {\n                // The easiest way to bubble the revert reason is using memory via assembly\n\n                assembly {\n                    let returndata_size := mload(returndata)\n                    revert(add(32, returndata), returndata_size)\n                }\n            } else {\n                revert(errorMessage);\n            }\n        }\n    }\n}"
    },
    "contracts/TreasuryFund.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./interfaces/IRewardToken.sol\";\n\ncontract TreasuryFund is Ownable {\n    using SafeERC20 for IRewardToken;\n    IRewardToken public ice = IRewardToken(0x4A81f8796e0c6Ad4877A51C86693B0dE8093F2ef);\n\n    uint256 private constant VESTING_DRATION = 3 * 365 * 24 * 3600; // 3 years\n    uint256 private constant ALLOCATION_AMOUNT = 100_000_000 ether; // 100 M\n    uint256 private constant START = 1626094800; // July 12th 2021, 1PM UTC\n    uint256 private constant VELOCITY = ALLOCATION_AMOUNT / VESTING_DRATION;\n    uint256 public claimed_amount;\n    uint256 public last_claimed = START;\n\n    function fundBalance() external view returns (uint256) {\n        return ice.balanceOf(address(this));\n    }\n\n    function claimable() public view returns (uint256) {\n        if (block.timestamp <= last_claimed) {\n            return 0;\n        }\n        return VELOCITY * (block.timestamp - last_claimed);\n    }\n\n    function claim() external onlyOwner {\n        uint256 _claimable = claimable();\n        if (_claimable > 0) {\n            ice.mint(address(this), _claimable);\n            claimed_amount += _claimable;\n            last_claimed = block.timestamp;\n        }\n    }\n\n    function sendTo(\n        address _receiver,\n        uint256 _amount\n    ) public onlyOwner {\n        require(_receiver != address(0), \"Invalid address\");\n        ice.safeTransfer(_receiver, _amount);\n    }\n}\n"
    },
    "contracts/rewarders/ComplexRewarderTime.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.4;\n\nimport \"../interfaces/IRewarder.sol\";\nimport \"../interfaces/IMiniChefV2.sol\";\nimport \"../libraries/Ownable.sol\";\nimport \"../libraries/SafeERC20.sol\";\n\ncontract ComplexRewarderTime is IRewarder,  Ownable{\n    using SafeERC20 for IERC20;\n\n    IERC20 private rewardToken;\n\n    /// @notice Info of each MCV2 user.\n    /// `amount` LP token amount the user has provided.\n    /// `rewardDebt` The amount of reward entitled to the user.\n    struct UserInfo {\n        uint256 amount;\n        uint256 rewardDebt;\n    }\n\n    /// @notice Info of each MCV2 pool.\n    /// `allocPoint` The amount of allocation points assigned to the pool.\n    /// Also known as the amount of SUSHI to distribute per block.\n    struct PoolInfo {\n        uint256 accRewardPerShare;\n        uint256 lastRewardTime;\n        uint256 allocPoint;\n    }\n\n    /// @notice Info of each pool.\n    mapping (uint256 => PoolInfo) public poolInfo;\n\n    uint256[] public poolIds;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 totalAllocPoint;\n\n    uint256 public rewardPerSecond;\n    uint256 private constant ACC_TOKEN_PRECISION = 1e12;\n\n    address private IRON_CHEF;\n\n    event LogOnReward(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint);\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint);\n    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardTime, uint256 lpSupply, uint256 accRewardPerShare);\n    event LogRewardPerSecond(uint256 rewardPerSecond);\n    event LogInit();\n\n    constructor (IERC20 _rewardToken, uint256 _rewardPerSecond, address _IRON_CHEF) {\n        rewardToken = _rewardToken;\n        rewardPerSecond = _rewardPerSecond;\n        IRON_CHEF = _IRON_CHEF;\n    }\n\n\n    function onReward (uint256 pid, address _user, address to, uint256, uint256 lpToken) onlyMCV2 override external {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][_user];\n        uint256 pending;\n        if (user.amount > 0) {\n            pending = user.amount * pool.accRewardPerShare / ACC_TOKEN_PRECISION - user.rewardDebt;\n            rewardToken.safeTransfer(to, pending);\n        }\n        user.amount = lpToken;\n        user.rewardDebt = lpToken * pool.accRewardPerShare / ACC_TOKEN_PRECISION;\n        emit LogOnReward(_user, pid, pending, to);\n    }\n\n    function pendingTokens(uint256 pid, address user, uint256) override external view returns (IERC20[] memory rewardTokens, uint256[] memory rewardAmounts) {\n        IERC20[] memory _rewardTokens = new IERC20[](1);\n        _rewardTokens[0] = (rewardToken);\n        uint256[] memory _rewardAmounts = new uint256[](1);\n        _rewardAmounts[0] = pendingToken(pid, user);\n        return (_rewardTokens, _rewardAmounts);\n    }\n\n    /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\n    /// @param _rewardPerSecond The amount of Sushi to be distributed per second.\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n        rewardPerSecond = _rewardPerSecond;\n        emit LogRewardPerSecond(_rewardPerSecond);\n    }\n\n    modifier onlyMCV2 {\n        require(\n            msg.sender == IRON_CHEF,\n            \"Only MCV2 can call this function.\"\n        );\n        _;\n    }\n\n    /// @notice Returns the number of MCV2 pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolIds.length;\n    }\n\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    /// @param allocPoint AP of the new pool.\n    /// @param _pid Pid on MCV2\n    function add(uint256 allocPoint, uint256 _pid) public onlyOwner {\n        require(poolInfo[_pid].lastRewardTime == 0, \"Pool already exists\");\n        uint256 lastRewardTime = block.timestamp;\n        totalAllocPoint += allocPoint;\n\n        poolInfo[_pid] = PoolInfo({\n            allocPoint: allocPoint,\n            lastRewardTime: lastRewardTime,\n            accRewardPerShare: 0\n            });\n        poolIds.push(_pid);\n        emit LogPoolAddition(_pid, allocPoint);\n    }\n\n    /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _allocPoint New AP of the pool.\n    function set(uint256 _pid, uint256 _allocPoint) public onlyOwner {\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        emit LogSetPool(_pid, _allocPoint);\n    }\n\n    /// @notice View function to see pending Token\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _user Address of user.\n    /// @return pending reward for a given user.\n    function pendingToken(uint256 _pid, address _user) public view returns (uint256 pending) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 lpSupply = IMiniChefV2(IRON_CHEF).lpToken(_pid).balanceOf(IRON_CHEF);\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n            uint256 time = block.timestamp - pool.lastRewardTime;\n            uint256 rewardAmount = time * rewardPerSecond * pool.allocPoint / totalAllocPoint;\n            accRewardPerShare  += rewardAmount * ACC_TOKEN_PRECISION / lpSupply;\n        }\n        pending = user.amount * accRewardPerShare / ACC_TOKEN_PRECISION - user.rewardDebt;\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata pids) external {\n        uint256 len = pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(pids[i]);\n        }\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[pid];\n        if (block.timestamp > pool.lastRewardTime) {\n            uint256 lpSupply = IMiniChefV2(IRON_CHEF).lpToken(pid).balanceOf(IRON_CHEF);\n\n            if (lpSupply > 0) {\n                uint256 time = block.timestamp - pool.lastRewardTime;\n                uint256 rewardAmount = time * rewardPerSecond * pool.allocPoint / totalAllocPoint;\n                pool.accRewardPerShare = pool.accRewardPerShare + rewardAmount * ACC_TOKEN_PRECISION / lpSupply;\n            }\n            pool.lastRewardTime = block.timestamp;\n            poolInfo[pid] = pool;\n            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accRewardPerShare);\n        }\n    }\n\n}\n"
    },
    "contracts/interfaces/IRewarder.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./IERC20.sol\";\n\ninterface IRewarder {\n\n    function onReward(uint256 pid, address user, address recipient, uint256 rewardAmount, uint256 newLpAmount) external;\n    function pendingTokens(uint256 pid, address user, uint256 rewardAmount) external view returns (IERC20[] memory, uint256[] memory);\n}\n"
    },
    "contracts/interfaces/IMiniChefV2.sol": {
      "content": "// SPDX-License-Identifier: MIT\npragma solidity 0.8.4;\nimport \"./IERC20.sol\";\n\ninterface IMiniChefV2 {\n    function lpToken(uint256 _pid) external view returns (IERC20);\n}\n"
    },
    "contracts/USDT.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/SafeMath.sol\";\n\ncontract USDT is Ownable, Initializable, ERC20Burnable {\n    using SafeMath for uint256;\n\n    uint256 public  MAX_TOTAL_SUPPLY = 10_000_000_000 ether; // 10 billions\n\n    mapping(address => uint256) public minters; // minter's address => minter's max cap\n    mapping(address => uint256) public minters_minted;\n\n    /* ========== EVENTS ========== */\n    event MinterUpdate(address indexed account, uint256 cap);\n    event MaxTotalSupplyUpdated(uint256 _newCap);\n\n    /* ========== Modifiers =============== */\n\n    modifier onlyMinter() {\n        require(minters[msg.sender] > 0, \"Only minter can interact\");\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol\n    ) ERC20(name, symbol) {\n    }\n\n    function initialize(uint256 _initial) public initializer {\n        super._mint(_msgSender(), _initial); // mint initial supply to add liquidity\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function mint(address _recipient, uint256 _amount) public onlyMinter {\n        minters_minted[_msgSender()] = minters_minted[_msgSender()].add(_amount);\n        require(minters[_msgSender()] >= minters_minted[_msgSender()], \"Minting amount exceeds minter cap\");\n        _mint(_recipient, _amount);\n    }\n\n    function mint_natural(address _recipient, uint256 _amount) public onlyMinter {\n        minters_minted[_msgSender()] = minters_minted[_msgSender()].add(_amount*10**18);\n        require(minters[_msgSender()] >= minters_minted[_msgSender()], \"Minting amount exceeds minter cap\");\n        _mint(_recipient, _amount*10**18);\n    }\n\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n        super._beforeTokenTransfer(_from, _to, _amount);\n        if (_from == address(0)) {\n            // When minting tokens\n            require(totalSupply().add(_amount) <= MAX_TOTAL_SUPPLY, \"Max total supply exceeded\");\n        }\n        if (_to == address(0)) {\n            // When burning tokens\n            MAX_TOTAL_SUPPLY = MAX_TOTAL_SUPPLY.sub(_amount, \"Burn amount exceeds max total supply\");\n        }\n    }\n\n    /* ========== OWNER FUNCTIONS ========== */\n\n    function setMinter(address _account, uint256 _minterCap) external onlyOwner {\n        require(_account != address(0), \"invalid address\");\n        require(minters_minted[_account] <= _minterCap, \"Minter already minted a larger amount than new cap\");\n        minters[_account] = _minterCap;\n        emit MinterUpdate(_account, _minterCap);\n    }\n\n    function resetMaxTotalSupply(uint256 _newCap) external onlyOwner {\n        require(_newCap >= totalSupply(), \"_newCap is below current total supply\");\n        MAX_TOTAL_SUPPLY = _newCap;\n        emit MaxTotalSupplyUpdated(_newCap);\n    }\n}\n"
    },
    "contracts/libraries/ERC20Burnable.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity ^0.8.0;\n\nimport \"./ERC20.sol\";\nimport \"./Context.sol\";\n\n/**\n * @dev Extension of {ERC20} that allows token holders to destroy both their own\n * tokens and those that they have an allowance for, in a way that can be\n * recognized off-chain (via event analysis).\n */\nabstract contract ERC20Burnable is Context, ERC20 {\n    /**\n     * @dev Destroys `amount` tokens from the caller.\n     *\n     * See {ERC20-_burn}.\n     */\n    function burn(uint256 amount) public virtual {\n        _burn(_msgSender(), amount);\n    }\n\n    /**\n     * @dev Destroys `amount` tokens from `account`, deducting from the caller's\n     * allowance.\n     *\n     * See {ERC20-_burn} and {ERC20-allowance}.\n     *\n     * Requirements:\n     *\n     * - the caller must have allowance for ``accounts``'s tokens of at least\n     * `amount`.\n     */\n    function burnFrom(address account, uint256 amount) public virtual {\n        uint256 currentAllowance = allowance(account, _msgSender());\n        require(\n            currentAllowance >= amount,\n            \"ERC20: burn amount exceeds allowance\"\n        );\n        unchecked {\n            _approve(account, _msgSender(), currentAllowance - amount);\n        }\n        _burn(account, amount);\n    }\n}\n"
    },
    "contracts/RequiemToken.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/SafeMath.sol\";\n\ncontract RequiemToken is Ownable, Initializable, ERC20Burnable {\n    using SafeMath for uint256;\n\n    uint256 public  MAX_TOTAL_SUPPLY = 10_000_000_000 ether; // 10 billions\n\n    mapping(address => uint256) public minters; // minter's address => minter's max cap\n    mapping(address => uint256) public minters_minted;\n\n    /* ========== EVENTS ========== */\n    event MinterUpdate(address indexed account, uint256 cap);\n    event MaxTotalSupplyUpdated(uint256 _newCap);\n\n    /* ========== Modifiers =============== */\n\n    modifier onlyMinter() {\n        require(minters[msg.sender] > 0, \"Only minter can interact\");\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol\n    ) ERC20(name, symbol) {\n    }\n\n    function initialize(uint256 _initial) public initializer {\n        super._mint(_msgSender(), _initial); // mint initial supply to add liquidity\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function mint(address _recipient, uint256 _amount) public onlyMinter {\n        minters_minted[_msgSender()] = minters_minted[_msgSender()].add(_amount);\n        require(minters[_msgSender()] >= minters_minted[_msgSender()], \"Minting amount exceeds minter cap\");\n        _mint(_recipient, _amount);\n    }\n\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n        super._beforeTokenTransfer(_from, _to, _amount);\n        if (_from == address(0)) {\n            // When minting tokens\n            require(totalSupply().add(_amount) <= MAX_TOTAL_SUPPLY, \"Max total supply exceeded\");\n        }\n        if (_to == address(0)) {\n            // When burning tokens\n            MAX_TOTAL_SUPPLY = MAX_TOTAL_SUPPLY.sub(_amount, \"Burn amount exceeds max total supply\");\n        }\n    }\n\n    /* ========== OWNER FUNCTIONS ========== */\n\n    function setMinter(address _account, uint256 _minterCap) external onlyOwner {\n        require(_account != address(0), \"invalid address\");\n        require(minters_minted[_account] <= _minterCap, \"Minter already minted a larger amount than new cap\");\n        minters[_account] = _minterCap;\n        emit MinterUpdate(_account, _minterCap);\n    }\n\n    function resetMaxTotalSupply(uint256 _newCap) external onlyOwner {\n        require(_newCap >= totalSupply(), \"_newCap is below current total supply\");\n        MAX_TOTAL_SUPPLY = _newCap;\n        emit MaxTotalSupplyUpdated(_newCap);\n    }\n}\n"
    },
    "contracts/DAI.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/Initializable.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./libraries/SafeMath.sol\";\n\ncontract DAI is Ownable, Initializable, ERC20Burnable {\n    using SafeMath for uint256;\n\n    uint256 public  MAX_TOTAL_SUPPLY = 10_000_000_000 ether; // 10 billions\n\n    mapping(address => uint256) public minters; // minter's address => minter's max cap\n    mapping(address => uint256) public minters_minted;\n\n    /* ========== EVENTS ========== */\n    event MinterUpdate(address indexed account, uint256 cap);\n    event MaxTotalSupplyUpdated(uint256 _newCap);\n\n    /* ========== Modifiers =============== */\n\n    modifier onlyMinter() {\n        require(minters[msg.sender] > 0, \"Only minter can interact\");\n        _;\n    }\n\n    constructor(\n        string memory name,\n        string memory symbol\n    ) ERC20(name, symbol) {\n    }\n\n    function initialize(uint256 _initial) public initializer {\n        super._mint(_msgSender(), _initial); // mint initial supply to add liquidity\n    }\n\n    /* ========== MUTATIVE FUNCTIONS ========== */\n\n    function mint(address _recipient, uint256 _amount) public onlyMinter {\n        minters_minted[_msgSender()] = minters_minted[_msgSender()].add(_amount);\n        require(minters[_msgSender()] >= minters_minted[_msgSender()], \"Minting amount exceeds minter cap\");\n        _mint(_recipient, _amount);\n    }\n\n    function mint_natural(address _recipient, uint256 _amount) public onlyMinter {\n        minters_minted[_msgSender()] = minters_minted[_msgSender()].add(_amount*10**18);\n        require(minters[_msgSender()] >= minters_minted[_msgSender()], \"Minting amount exceeds minter cap\");\n        _mint(_recipient, _amount*10**18);\n    }\n\n    function _beforeTokenTransfer(address _from, address _to, uint256 _amount) internal override {\n        super._beforeTokenTransfer(_from, _to, _amount);\n        if (_from == address(0)) {\n            // When minting tokens\n            require(totalSupply().add(_amount) <= MAX_TOTAL_SUPPLY, \"Max total supply exceeded\");\n        }\n        if (_to == address(0)) {\n            // When burning tokens\n            MAX_TOTAL_SUPPLY = MAX_TOTAL_SUPPLY.sub(_amount, \"Burn amount exceeds max total supply\");\n        }\n    }\n\n    /* ========== OWNER FUNCTIONS ========== */\n\n    function setMinter(address _account, uint256 _minterCap) external onlyOwner {\n        require(_account != address(0), \"invalid address\");\n        require(minters_minted[_account] <= _minterCap, \"Minter already minted a larger amount than new cap\");\n        minters[_account] = _minterCap;\n        emit MinterUpdate(_account, _minterCap);\n    }\n\n    function resetMaxTotalSupply(uint256 _newCap) external onlyOwner {\n        require(_newCap >= totalSupply(), \"_newCap is below current total supply\");\n        MAX_TOTAL_SUPPLY = _newCap;\n        emit MaxTotalSupplyUpdated(_newCap);\n    }\n}\n"
    },
    "contracts/RedRequiem.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\nimport \"./libraries/ERC20Burnable.sol\";\nimport \"./libraries/SafeERC20.sol\";\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/IGovernanceToken.sol\";\n\ncontract RedRequiem is ERC20Burnable, IGovernanceToken, Ownable {\n    using SafeERC20 for IERC20;\n\n    // flags\n    uint256 private _unlocked;\n\n    uint256 public constant MINDAYS = 7;\n    uint256 public constant MAXDAYS = 3 * 365;\n\n    uint256 public constant MAXTIME = MAXDAYS * 1 days; // 3 years\n    uint256 public constant MAX_WITHDRAWAL_PENALTY = 50000; // 50%\n    uint256 public constant PRECISION = 100000; // 5 decimals\n\n    address public lockedToken;\n    address public penaltyCollector;\n    uint256 public minLockedAmount;\n    uint256 public earlyWithdrawPenaltyRate;\n\n    struct LockedBalance {\n        uint256 amount;\n        uint256 end;\n    }\n\n    mapping(address => LockedBalance) public locked;\n    mapping(address => uint256) public mintedForLock;\n\n    /* ========== MODIFIERS ========== */\n\n    modifier lock() {\n        require(_unlocked == 1, \"LOCKED\");\n        _unlocked = 0;\n        _;\n        _unlocked = 1;\n    }\n\n    constructor(\n        string memory _name,\n        string memory _symbol,\n        address _lockedToken,\n        uint256 _minLockedAmount) ERC20(_name, _symbol)\n    {\n        lockedToken = _lockedToken;\n        minLockedAmount = _minLockedAmount;\n        earlyWithdrawPenaltyRate = 30000; // 30%\n        _unlocked = 1;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n    function locked__of(address _addr) external view override returns (uint256) {\n        return locked[_addr].amount;\n    }\n\n    function locked__end(address _addr) external view override returns (uint256) {\n        return locked[_addr].end;\n    }\n\n    function voting_power_unlock_time(uint256 _value, uint256 _unlock_time) public view override returns (uint256) {\n        uint256 _now = block.timestamp;\n        if (_unlock_time <= _now) return 0;\n        uint256 _lockedSeconds = _unlock_time - _now;\n        if (_lockedSeconds >= MAXTIME) {\n            return _value;\n        }\n        return _value * _lockedSeconds / MAXTIME;\n    }\n\n    function voting_power_locked_days(uint256 _value, uint256 _days) public pure override returns (uint256) {\n        if (_days >= MAXDAYS) {\n            return _value;\n        }\n        return _value * _days / MAXDAYS;\n    }\n\n    function deposit_for(address _addr, uint256 _value) external override {\n        require(_value >= minLockedAmount, \"less than min amount\");\n        _deposit_for(_addr, _value, 0);\n    }\n\n    function create_lock(uint256 _value, uint256 _days) external override {\n        require(_value >= minLockedAmount, \"less than min amount\");\n        require(locked[_msgSender()].amount == 0, \"Withdraw old tokens first\");\n        require(_days >= MINDAYS, \"Voting lock can be 7 days min\");\n        require(_days <= MAXDAYS, \"Voting lock can be 4 years max\");\n        _deposit_for(_msgSender(), _value, _days);\n    }\n\n    function increase_amount(uint256 _value) external override {\n        require(_value >= minLockedAmount, \"less than min amount\");\n        _deposit_for(_msgSender(), _value, 0);\n    }\n\n    function increase_unlock_time(uint256 _days) external override {\n        require(_days >= MINDAYS, \"Voting lock can be 7 days min\");\n        require(_days <= MAXDAYS, \"Voting lock can be 4 years max\");\n        _deposit_for(_msgSender(), 0, _days);\n    }\n\n    function withdraw() external override lock {\n        LockedBalance storage _locked = locked[_msgSender()];\n        uint256 _now = block.timestamp;\n        require(_locked.amount > 0, \"Nothing to withdraw\");\n        require(_now >= _locked.end, \"The lock didn't expire\");\n        uint256 _amount = _locked.amount;\n        _locked.end = 0;\n        _locked.amount = 0;\n        _burn(_msgSender(), mintedForLock[_msgSender()]);\n        mintedForLock[_msgSender()] = 0;\n        IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\n\n        emit Withdraw(_msgSender(), _amount, _now);\n    }\n\n    // This will charge PENALTY if lock is not expired yet\n    function emergencyWithdraw() external lock {\n        LockedBalance storage _locked = locked[_msgSender()];\n        uint256 _now = block.timestamp;\n        require(_locked.amount > 0, \"Nothing to withdraw\");\n        uint256 _amount = _locked.amount;\n        if (_now < _locked.end) {\n            uint256 _fee = _amount * earlyWithdrawPenaltyRate / PRECISION;\n            _penalize(_fee);\n            _amount = _amount - _fee;\n        }\n        _locked.end = 0;\n        _locked.amount = 0;\n        _burn(_msgSender(), mintedForLock[_msgSender()]);\n        mintedForLock[_msgSender()] = 0;\n\n        IERC20(lockedToken).safeTransfer(_msgSender(), _amount);\n\n        emit Withdraw(_msgSender(), _amount, _now);\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function _deposit_for(\n        address _addr,\n        uint256 _value,\n        uint256 _days\n    ) internal lock {\n        LockedBalance storage _locked = locked[_addr];\n        uint256 _now = block.timestamp;\n        uint256 _amount = _locked.amount;\n        uint256 _end = _locked.end;\n        uint256 _vp;\n        if (_amount == 0) {\n            _vp = voting_power_locked_days(_value, _days);\n            _locked.amount = _value;\n            _locked.end = _now + _days * 1 days;\n        } else if (_days == 0) {\n            _vp = voting_power_unlock_time(_value, _end);\n            _locked.amount = _amount + _value;\n        } else {\n            require(_value == 0, \"Cannot increase amount and extend lock in the same time\");\n            _vp = voting_power_locked_days(_amount, _days);\n            _locked.end = _end + _days * 1 days;\n            require(_locked.end - _now <= MAXTIME, \"Cannot extend lock to more than 4 years\");\n        }\n        require(_vp > 0, \"No benefit to lock\");\n        if (_value > 0) {\n            IERC20(lockedToken).safeTransferFrom(_msgSender(), address(this), _value);\n        }\n        _mint(_addr, _vp);\n        mintedForLock[_addr] += _vp;\n\n        emit Deposit(_addr, _locked.amount, _locked.end, _now);\n    }\n\n    function _penalize(uint256 _amount) internal {\n        if (penaltyCollector != address(0)) {\n            // send to collector if `penaltyCollector` set\n            IERC20(lockedToken).safeTransfer(penaltyCollector, _amount);\n        } else {\n            ERC20Burnable(lockedToken).burn(_amount);\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    function setMinLockedAmount(uint256 _minLockedAmount) external onlyOwner {\n        minLockedAmount = _minLockedAmount;\n        emit MinLockedAmountSet(_minLockedAmount);\n    }\n\n    function setEarlyWithdrawPenaltyRate(uint256 _earlyWithdrawPenaltyRate) external onlyOwner {\n        require(_earlyWithdrawPenaltyRate <= MAX_WITHDRAWAL_PENALTY, \"withdrawal penalty is too high\"); // <= 50%\n        earlyWithdrawPenaltyRate = _earlyWithdrawPenaltyRate;\n        emit EarlyWithdrawPenaltySet(_earlyWithdrawPenaltyRate);\n    }\n\n    function setPenaltyCollector(address _addr) external onlyOwner {\n        penaltyCollector = _addr;\n        emit PenaltyCollectorSet(_addr);\n    }\n\n    /* =============== EVENTS ==================== */\n    event Deposit(address indexed provider, uint256 value, uint256 locktime, uint256 timestamp);\n    event Withdraw(address indexed provider, uint256 value, uint256 timestamp);\n    event PenaltyCollectorSet(address indexed addr);\n    event EarlyWithdrawPenaltySet(uint256 indexed penalty);\n    event MinLockedAmountSet(uint256 indexed amount);\n}\n"
    },
    "contracts/interfaces/IGovernanceToken.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\npragma solidity 0.8.4;\n\ninterface IGovernanceToken {\n    function locked__of(address _addr) external view returns (uint256);\n\n    function locked__end(address _addr) external view returns (uint256);\n\n    function voting_power_unlock_time(uint256 _value, uint256 _unlock_time) external view returns (uint256);\n\n    function voting_power_locked_days(uint256 _value, uint256 _days) external view returns (uint256);\n\n    function deposit_for(address _addr, uint256 _value) external;\n\n    function create_lock(uint256 _value, uint256 _days) external;\n\n    function increase_amount(uint256 _value) external;\n\n    function increase_unlock_time(uint256 _days) external;\n\n    function withdraw() external;\n}\n"
    },
    "contracts/RequiemChef.sol": {
      "content": "// SPDX-License-Identifier: UNLICENSED\n\npragma solidity 0.8.4;\n\nimport \"./libraries/Ownable.sol\";\nimport \"./interfaces/IERC20.sol\";\nimport \"./interfaces/IRewarder.sol\";\nimport \"./interfaces/IFundDistributor.sol\";\nimport \"./libraries/SafeERC20.sol\";\n\n/*  RequiemChef is a fork from Sushi's MiniChef v2 with slightly modification.\n    1.  Rewards will be transferred from a seperated contract so that it will be more flexible to switch between:\n        [mint reward token directly] OR [transfer them instead]\n    2.  Add a Harvest all function to quickly harvest rewards from all the deposited pools\n*/\ncontract RequiemChef is Ownable {\n    using SafeERC20 for IERC20;\n\n    struct UserInfo {\n        uint256 amount;\n        int256 rewardDebt;\n    }\n\n    struct PoolInfo {\n        uint256 accRewardPerShare;\n        uint256 lastRewardTime;\n        uint256 allocPoint;\n    }\n\n    IERC20 public reward;\n    IFundDistributor public fund;\n\n    /// @notice Info of each MCV2 pool.\n    PoolInfo[] public poolInfo;\n    /// @notice Address of the LP token for each MCV2 pool.\n    IERC20[] public lpToken;\n    /// @notice Address of each `IRewarder` contract in MCV2.\n    IRewarder[] public rewarder;\n\n    /// @notice Info of each user that stakes LP tokens.\n    mapping (uint256 => mapping (address => UserInfo)) public userInfo;\n    /// @dev Total allocation points. Must be the sum of all allocation points in all pools.\n    uint256 public totalAllocPoint = 0;\n\n    uint256 public rewardPerSecond;\n    uint256 private constant ACC_REWARD_PRECISION = 1e12;\n\n    constructor(IERC20 _reward, IFundDistributor _fund) {\n        reward = _reward;\n        fund = _fund;\n    }\n\n    /* ========== PUBLIC FUNCTIONS ========== */\n\n\n    /// @notice Returns the number of MCV2 pools.\n    function poolLength() public view returns (uint256 pools) {\n        pools = poolInfo.length;\n    }\n\n    /// @notice View function to see pending reward on frontend.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _user Address of user.\n    /// @return pending reward for a given user.\n    function pendingReward(uint256 _pid, address _user) external view returns (uint256 pending) {\n        PoolInfo memory pool = poolInfo[_pid];\n        UserInfo storage user = userInfo[_pid][_user];\n        uint256 accRewardPerShare = pool.accRewardPerShare;\n        uint256 lpSupply = lpToken[_pid].balanceOf(address(this));\n        if (block.timestamp > pool.lastRewardTime && lpSupply != 0) {\n            uint256 time = block.timestamp - pool.lastRewardTime;\n            uint256 rewardAmount = time * rewardPerSecond * pool.allocPoint / totalAllocPoint;\n            accRewardPerShare += (rewardAmount * ACC_REWARD_PRECISION) / lpSupply;\n        }\n        pending = uint256(int256(user.amount * accRewardPerShare / ACC_REWARD_PRECISION) - user.rewardDebt);\n    }\n\n    /// @notice Update reward variables of the given pool.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @return pool Returns the pool that was updated.\n    function updatePool(uint256 pid) public returns (PoolInfo memory pool) {\n        pool = poolInfo[pid];\n        if (block.timestamp > pool.lastRewardTime) {\n            uint256 lpSupply = lpToken[pid].balanceOf(address(this));\n            if (lpSupply > 0) {\n                uint256 time = block.timestamp - pool.lastRewardTime;\n                uint256 rewardAmount = time * rewardPerSecond * pool.allocPoint / totalAllocPoint;\n                pool.accRewardPerShare += rewardAmount * ACC_REWARD_PRECISION / lpSupply;\n            }\n            pool.lastRewardTime = block.timestamp;\n            poolInfo[pid] = pool;\n            emit LogUpdatePool(pid, pool.lastRewardTime, lpSupply, pool.accRewardPerShare);\n        }\n    }\n\n    /// @notice Update reward variables for all pools. Be careful of gas spending!\n    /// @param pids Pool IDs of all to be updated. Make sure to update all active pools.\n    function massUpdatePools(uint256[] calldata pids) external {\n        uint256 len = pids.length;\n        for (uint256 i = 0; i < len; ++i) {\n            updatePool(pids[i]);\n        }\n    }\n\n    /// @notice Deposit LP tokens to MCV2 for reward allocation.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to deposit.\n    /// @param to The receiver of `amount` deposit benefit.\n    function deposit(uint256 pid, uint256 amount, address to) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][to];\n\n        // Effects\n        user.amount += amount;\n        user.rewardDebt += int256(amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\n\n        // Interactions\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(pid, to, to, 0, user.amount);\n        }\n\n        lpToken[pid].safeTransferFrom(msg.sender, address(this), amount);\n\n        emit Deposit(msg.sender, pid, amount, to);\n    }\n\n    /// @notice Withdraw LP tokens from MCV2.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens.\n    function withdraw(uint256 pid, uint256 amount, address to) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n\n        // Effects\n        user.rewardDebt -= int256(amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\n        user.amount -= amount;\n        // Interactions\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(pid, msg.sender, to, 0, user.amount);\n        }\n\n        lpToken[pid].safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, pid, amount, to);\n    }\n\n    /// @notice Harvest proceeds for transaction sender to `to`.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param to Receiver of rewards.\n    function harvest(uint256 pid, address to) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n        int256 accumulatedReward = int256(user.amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\n\n        // Effects\n        user.rewardDebt = accumulatedReward;\n\n        // Interactions\n        fund.distributeTo(to, _pendingReward);\n\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward( pid, msg.sender, to, _pendingReward, user.amount);\n        }\n\n        emit Harvest(msg.sender, pid, _pendingReward);\n    }\n\n    /// @notice Withdraw LP tokens from MCV2 and harvest proceeds for transaction sender to `to`.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param amount LP token amount to withdraw.\n    /// @param to Receiver of the LP tokens and rewards.\n    function withdrawAndHarvest(uint256 pid, uint256 amount, address to) public {\n        PoolInfo memory pool = updatePool(pid);\n        UserInfo storage user = userInfo[pid][msg.sender];\n        int256 accumulatedReward = int256(user.amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\n        uint256 _pendingReward = uint256(accumulatedReward - user.rewardDebt);\n\n        // Effects\n        user.rewardDebt = accumulatedReward - int256(amount * pool.accRewardPerShare / ACC_REWARD_PRECISION);\n        user.amount -= amount;\n\n        // Interactions\n        fund.distributeTo(to, _pendingReward);\n\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(pid, msg.sender, to, _pendingReward, user.amount);\n        }\n\n        lpToken[pid].safeTransfer(to, amount);\n\n        emit Withdraw(msg.sender, pid, amount, to);\n        emit Harvest(msg.sender, pid, _pendingReward);\n    }\n\n    /// @notice Withdraw without caring about rewards. EMERGENCY ONLY.\n    /// @param pid The index of the pool. See `poolInfo`.\n    /// @param to Receiver of the LP tokens.\n    function emergencyWithdraw(uint256 pid, address to) public {\n        UserInfo storage user = userInfo[pid][msg.sender];\n        uint256 amount = user.amount;\n        user.amount = 0;\n        user.rewardDebt = 0;\n\n        IRewarder _rewarder = rewarder[pid];\n        if (address(_rewarder) != address(0)) {\n            _rewarder.onReward(pid, msg.sender, to, 0, 0);\n        }\n\n        // Note: transfer can fail or succeed if `amount` is zero.\n        lpToken[pid].safeTransfer(to, amount);\n        emit EmergencyWithdraw(msg.sender, pid, amount, to);\n    }\n\n    function harvestAllRewards(address to) external {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            if (userInfo[pid][msg.sender].amount > 0) {\n                harvest(pid, to);\n            }\n        }\n    }\n\n    /* ========== INTERNAL FUNCTIONS ========== */\n\n    function checkPoolDuplicate(IERC20 _lpToken) internal view {\n        uint256 length = poolInfo.length;\n        for (uint256 pid = 0; pid < length; ++pid) {\n            require(lpToken[pid] != _lpToken, \"add: existing pool?\");\n        }\n    }\n\n    /* ========== RESTRICTED FUNCTIONS ========== */\n\n    /// @notice Add a new LP to the pool. Can only be called by the owner.\n    /// DO NOT add the same LP token more than once. Rewards will be messed up if you do.\n    /// @param allocPoint AP of the new pool.\n    /// @param _lpToken Address of the LP ERC-20 token.\n    /// @param _rewarder Address of the rewarder delegate.\n    function add(uint256 allocPoint, IERC20 _lpToken, IRewarder _rewarder) public onlyOwner {\n        checkPoolDuplicate(_lpToken);\n\n        totalAllocPoint += allocPoint;\n        lpToken.push(_lpToken);\n        rewarder.push(_rewarder);\n\n        poolInfo.push(PoolInfo({\n            allocPoint: allocPoint,\n            lastRewardTime: block.timestamp,\n            accRewardPerShare: 0\n            }));\n        emit LogPoolAddition(lpToken.length - 1, allocPoint, _lpToken, _rewarder);\n    }\n\n    /// @notice Update the given pool's reward allocation point and `IRewarder` contract. Can only be called by the owner.\n    /// @param _pid The index of the pool. See `poolInfo`.\n    /// @param _allocPoint New AP of the pool.\n    /// @param _rewarder Address of the rewarder delegate.\n    /// @param overwrite True if _rewarder should be `set`. Otherwise `_rewarder` is ignored.\n    function set(uint256 _pid, uint256 _allocPoint, IRewarder _rewarder, bool overwrite) public onlyOwner {\n        totalAllocPoint = totalAllocPoint - poolInfo[_pid].allocPoint + _allocPoint;\n        poolInfo[_pid].allocPoint = _allocPoint;\n        if (overwrite) { rewarder[_pid] = _rewarder; }\n        emit LogSetPool(_pid, _allocPoint, overwrite ? _rewarder : rewarder[_pid], overwrite);\n    }\n\n    /// @notice Sets the reward per second to be distributed. Can only be called by the owner.\n    /// @param _rewardPerSecond The amount of reward to be distributed per second.\n    function setRewardPerSecond(uint256 _rewardPerSecond) public onlyOwner {\n        rewardPerSecond = _rewardPerSecond;\n        emit LogRewardPerSecond(_rewardPerSecond);\n    }\n\n    /// @notice Set the new fund contract.\n    /// @param _fund The address of new fund contract.\n    function setFund(IFundDistributor _fund) public onlyOwner {\n        fund = _fund;\n        emit PoolFundChanged(address(_fund));\n    }\n\n    /* =============== EVENTS ==================== */\n\n    event Deposit(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n    event Withdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n    event EmergencyWithdraw(address indexed user, uint256 indexed pid, uint256 amount, address indexed to);\n    event Harvest(address indexed user, uint256 indexed pid, uint256 amount);\n    event LogPoolAddition(uint256 indexed pid, uint256 allocPoint, IERC20 indexed lpToken, IRewarder indexed rewarder);\n    event LogSetPool(uint256 indexed pid, uint256 allocPoint, IRewarder indexed rewarder, bool overwrite);\n    event LogUpdatePool(uint256 indexed pid, uint256 lastRewardTime, uint256 lpSupply, uint256 accRewardPerShare);\n    event LogRewardPerSecond(uint256 rewardPerSecond);\n    event PoolFundChanged(address indexed fund);\n}\n"
    },
    "contracts/interfaces/IFundDistributor.sol": {
      "content": "// SPDX-License-Identifier: MIT\n\npragma solidity 0.8.4;\n\ninterface IFundDistributor {\n    function distributeTo(\n        address _receiver,\n        uint256 _amount\n    ) external;\n}\n"
    }
  },
  "settings": {
    "optimizer": {
      "enabled": true,
      "runs": 200
    },
    "evmVersion": "istanbul",
    "outputSelection": {
      "*": {
        "*": [
          "abi",
          "evm.bytecode",
          "evm.deployedBytecode",
          "evm.methodIdentifiers",
          "metadata",
          "devdoc",
          "userdoc",
          "storageLayout",
          "evm.gasEstimates"
        ],
        "": [
          "ast"
        ]
      }
    },
    "metadata": {
      "useLiteralContent": true
    },
    "libraries": {
      "": {
        "__CACHE_BREAKER__": "0x00000000d41867734bbee4c6863d9255b2b06ac1"
      }
    }
  }
}